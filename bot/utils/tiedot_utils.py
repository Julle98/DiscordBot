import discord
import os
import json
from io import BytesIO
from datetime import datetime, timedelta
from discord import Interaction
import zipfile
from pathlib import Path
from discord import ui
from dotenv import load_dotenv
from collections import Counter
from bot.utils.bot_setup import bot
from datetime import datetime
import re

load_dotenv()

JSON_DIR = Path(os.getenv("JSON_DIR"))
JSON_DIRS = Path(os.getenv("JSON_DIRS"))
XP_JSON_PATH = Path(os.getenv("XP_JSON_PATH"))
MOD_LOG_CHANNEL_ID = int(os.getenv("MOD_LOG_CHANNEL_ID", 0))
MODLOG_CHANNEL_ID = (int(os.getenv("MODLOG_CHANNEL_ID", 0)))
HELP_CHANNEL_ID = (int(os.getenv("HELP_CHANNEL_ID", 0)))
MUTE_CHANNEL_ID = (int(os.getenv("MUTE_CHANNEL_ID", 0)))
SLOWMODE_CHANNEL_ID = (int(os.getenv("SLOWMODE_CHANNEL_ID", 0)))
LOG_CHANNEL_ID = (int(os.getenv("LOG_CHANNEL_ID", 0)))
BACKUP_JSON_PATH = Path(os.getenv("BACKUP_JSON_PATH", "backup"))

TIEDOSTOT = {
    "Teht√§v√§t": JSON_DIR / "tasks.json",
    "Ostokset": JSON_DIRS / "ostot.json",
    "Streakit": JSON_DIR / "streaks.json",
    "Tarjous": JSON_DIRS / "tarjous.json",
    "XP-data": XP_JSON_PATH / "users_xp.json",
    "Puhe-streak": XP_JSON_PATH / "users_streak.json",
    "Kuponki": JSON_DIRS / "kuponki.json",
}

KATEGORIAT = list(TIEDOSTOT.keys()) + ["Moderointi", "Toiminta", "Komennot"]

def varmuuskopioi_json_tiedostot():
    BACKUP_JSON_PATH.mkdir(parents=True, exist_ok=True)
    for nimi, polku in TIEDOSTOT.items():
        if polku.exists():
            backup_polku = BACKUP_JSON_PATH / f"{nimi}_backup.json"
            try:
                with open(polku, "r", encoding="utf-8") as src, open(backup_polku, "w", encoding="utf-8") as dst:
                    dst.write(src.read())
            except Exception as e:
                print(f"Varmuuskopiointivirhe tiedostolle {nimi}:", e)

def j√§senn√§_teht√§v√§viesti(viesti):
    try:
        sis√§lt√∂ = json.loads(viesti["content"])
        teht√§v√§ = sis√§lt√∂.get("task", "")
        aikaleima = sis√§lt√∂.get("timestamp", "")
        return {
            "task": teht√§v√§,
            "timestamp": aikaleima
        }
    except Exception as e:
        print(f"Viestin j√§sennys ep√§onnistui: {e}")
        return None

def j√§senn√§_teht√§v√§tekstist√§(teksti):
    m = re.search(r"suoritti.*teht√§v√§n:? (?P<teht√§v√§>.+?)\s+XP: \+(\d+)", teksti)
    if m:
        teht√§v√§ = m.group("teht√§v√§")
        xp = int(m.group(2))
        aikaleima = datetime.now().isoformat()  
        return {
            "task": teht√§v√§,
            "xp": xp,
            "timestamp": aikaleima
        }
    return None

def laske_teht√§v√§_xp_viesteist√§(viestit):
    yhteens√§_xp = 0
    teht√§v√§lista = []

    for viesti in viestit:
        sis√§lt√∂ = viesti.get("content")
        if not sis√§lt√∂:
            continue

        teht√§v√§ = j√§senn√§_teht√§v√§tekstist√§(sis√§lt√∂)
        if teht√§v√§:
            yhteens√§_xp += teht√§v√§["xp"]
            teht√§v√§lista.append(teht√§v√§)

    return yhteens√§_xp, teht√§v√§lista

def hae_kokonais_xp(uid):
    try:
        with open(TIEDOSTOT["XP-data"], encoding="utf-8") as f:
            data = json.load(f)
        return data.get(uid, {}).get("xp", 0)
    except Exception as e:
        print(f"Virhe XP-datan haussa: {e}")
        return 0

async def hae_teht√§vien_m√§√§r√§(user_id: str):
    channel = bot.get_channel(int(os.getenv("TASK_DATA_CHANNEL_ID")))
    if not channel:
        return 0
    count = 0
    async for msg in channel.history(limit=1000):
        try:
            data = json.loads(msg.content)
            if data.get("type") == "user_task" and str(data.get("user_id")) == user_id:
                count += 1
        except:
            continue
    return count

async def hae_teht√§v√§viestit(user_id: str):
    kanava = bot.get_channel(int(os.getenv("TASK_DATA_CHANNEL_ID")))
    teht√§v√§t = []
    async for msg in kanava.history(limit=500):
        try:
            data = json.loads(msg.content)
            if data.get("type") == "user_task" and str(data.get("user_id")) == user_id:
                teht√§v√§t.append(data)
        except:
            continue
    return teht√§v√§t

async def hae_tarjousviestit(user_id: str):
    kanava = bot.get_channel(int(os.getenv("OSTOSLOKI_KANAVA_ID")))
    viestit = []
    async for msg in kanava.history(limit=500):
        if f"<@{user_id}>" in msg.content and "Tarjous!" in msg.content:
            viestit.append(msg)
    return viestit

async def hae_ostosm√§√§r√§(user_id: str):
    channel = bot.get_channel(int(os.getenv("OSTOSLOKI_KANAVA_ID")))
    if not channel:
        return 0
    count = 0
    async for msg in channel.history(limit=500):
        if f"<@{user_id}>" in msg.content:
            count += 1
    return count

async def hae_ostosviestit(user_id: str):
    kanava = bot.get_channel(int(os.getenv("OSTOSLOKI_KANAVA_ID")))
    viestit = []

    if not kanava:
        return []

    async for msg in kanava.history(limit=500):
        if f"<@{user_id}>" in msg.content and "osti tuotteen" in msg.content:
            viestit.append(msg)

    return viestit

async def hae_k√§ytt√§j√§n_komennot(user_id: int):
    log_channel = bot.get_channel(int(os.getenv("LOG_CHANNEL_ID")))
    laskuri = Counter()
    yhteens√§ = 0

    if not log_channel:
        return 0, {}

    async for msg in log_channel.history(limit=1000):
        if f"({user_id})" in msg.content:
            match = re.search(r"Komento:\s*/?([^\n]+)", msg.content)
            if match:
                komento = match.group(1).lstrip("/")
                laskuri[komento] += 1
                yhteens√§ += 1

    return yhteens√§, laskuri

async def hae_k√§ytt√§j√§n_komennot_lista(user_id: int):
    log_channel = bot.get_channel(int(os.getenv("LOG_CHANNEL_ID")))
    laskuri = Counter()

    if not log_channel:
        return {}

    async for msg in log_channel.history(limit=1000):
        if f"({user_id})" in msg.content:
            match = re.search(r"Komento:\s*/?([^\n]+)", msg.content)
            if match:
                komento = match.group(1).lstrip("/")
                laskuri[komento] += 1
    return laskuri

async def hae_viimeisin_aktiivisuusviesti(user_id: str):
    kanavat = [
        bot.get_channel(int(os.getenv("TASK_DATA_CHANNEL_ID"))),
        bot.get_channel(int(os.getenv("OSTOSLOKI_KANAVA_ID"))),
        bot.get_channel(SLOWMODE_CHANNEL_ID)
    ]
    viimeisin = None

    for kanava in kanavat:
        if not kanava:
            continue
        async for msg in kanava.history(limit=500):
            if f"{user_id}" in msg.content or f"<@{user_id}>" in msg.content:
                if not viimeisin or msg.created_at > viimeisin:
                    viimeisin = msg.created_at

    return viimeisin

def hae_tuotteen_hinta(nimi: str) -> int:
    try:
        with open(JSON_DIRS / "tuotteet.json", encoding="utf-8") as f:
            tuotteet = json.load(f)
        for tuote in tuotteet:
            if tuote.get("nimi") == nimi:
                return int(tuote.get("hinta", 0))
    except Exception as e:
        print(f"Hinnan haku ep√§onnistui: {e}")
    return 0

class J√§senToimintaAnalyysi:
    def __init__(self, j√§sen: discord.Member):
        self.j√§sen = j√§sen
        self.kanavam√§√§r√§t = {}

    async def analysoi(self, guild: discord.Guild, limit=1000):
        self.kanavam√§√§r√§t.clear()
        kanavat = [c for c in guild.text_channels if c.permissions_for(self.j√§sen).read_messages]

        for kanava in kanavat:
            try:
                count = 0
                async for msg in kanava.history(limit=limit):
                    if msg.author == self.j√§sen:
                        count += 1
                if count > 0:
                    self.kanavam√§√§r√§t[kanava] = count
            except discord.Forbidden:
                continue

    def aktiivisin(self):
        if not self.kanavam√§√§r√§t:
            return None, 0
        kanava = max(self.kanavam√§√§r√§t, key=self.kanavam√§√§r√§t.get)
        return kanava, self.kanavam√§√§r√§t[kanava]

async def muodosta_kategoria_embed(kategoria: str, user: discord.User, bot, interaction: discord.Interaction) -> discord.Embed:
    uid = str(user.id)
    embed = discord.Embed(
        title=f"üì¶ Kategoria: {kategoria}",
        description=f"Tiedot k√§ytt√§j√§lt√§: {user.display_name}",
        color=discord.Color.blurple()
    )

    if user.id != interaction.user.id:
        roolit = getattr(interaction.user, "roles", [])
        is_mestari = any(r.name == "Mestari" for r in roolit)
        if is_mestari:
            embed.description = (
                f"üëÄ Katselet toisen k√§ytt√§j√§n tietoja: **{user.display_name}**\n\n"
                + embed.description
            )
        else:
            embed.clear_fields()
            embed.title = "üö´ Ei oikeuksia"
            embed.description = "Sinulla ei ole oikeutta tarkastella muiden k√§ytt√§jien tietoja."
            embed.color = discord.Color.red()
            return embed

    user_data = None
    historia = []

    if kategoria in TIEDOSTOT:
        path = TIEDOSTOT[kategoria]
        try:
            with open(path, encoding="utf-8") as f:
                data = json.load(f)
                user_data = data.get(uid)
        except Exception as e:
            embed.add_field(name="‚ö†Ô∏è Virhe", value=f"Tietojen lataus ep√§onnistui: {e}", inline=False)

        if kategoria == "Teht√§v√§t":
            teht√§v√§viestit = await hae_teht√§v√§viestit(uid)
            m√§√§r√§ = len(teht√§v√§viestit)

            try:
                with open(TIEDOSTOT.get("Streakit"), encoding="utf-8") as f:
                    streaks = json.load(f)

                daily = streaks.get(uid, {}).get("daily", {})
                weekly = streaks.get(uid, {}).get("weekly", {})
                monthly = streaks.get(uid, {}).get("monthly", {})

                daily_streak = daily.get("streak", 0)
                weekly_streak = weekly.get("streak", 0)
                monthly_streak = monthly.get("streak", 0)

                if monthly_streak >= 1:
                    xp_per_task = 150
                elif weekly_streak >= 1:
                    xp_per_task = 100
                elif daily_streak >= 1:
                    xp_per_task = 50
                else:
                    xp_per_task = 50

                total_xp = m√§√§r√§ * xp_per_task

                embed.add_field(name="üìä Teht√§vien m√§√§r√§", value=f"{m√§√§r√§} kpl", inline=True)
                embed.add_field(name="‚ú® XP yhteens√§", value=f"{total_xp} XP", inline=True)
                embed.add_field(name="üî• XP / teht√§v√§", value=f"{xp_per_task} XP", inline=True)

                embed.add_field(
                    name="üìÖ P√§ivitt√§inen streak",
                    value=f"{daily_streak} p√§iv√§√§",
                    inline=False
                )
                embed.add_field(
                    name="üìÜ Viikoittainen streak",
                    value=f"{weekly_streak} viikkoa",
                    inline=False
                )
                embed.add_field(
                    name="üóìÔ∏è Kuukausittainen streak",
                    value=f"{monthly_streak} kuukautta",
                    inline=False
                )
            except Exception as e:
                embed.add_field(name="‚ö†Ô∏è Virhe", value=f"Streak/XP-datan lataus ep√§onnistui: {e}", inline=False)

            embed.add_field(name="üìÑ Viimeisimm√§t teht√§v√§t", value="Alla n√§kyy 5 viimeisint√§ suoritettua teht√§v√§√§:", inline=False)
            for i, teht√§v√§ in enumerate(teht√§v√§viestit[:5]):
                kuvaus = teht√§v√§.get("task", "Tuntematon teht√§v√§")
                aikaleima = teht√§v√§.get("timestamp")
                try:
                    aika = datetime.fromisoformat(aikaleima).strftime("%d.%m.%Y %H:%M") if aikaleima else "?"
                except:
                    aika = "?"
                embed.add_field(name=f"üìò Teht√§v√§ {i+1}", value=f"{kuvaus}\nüïí {aika}", inline=False)

        elif kategoria == "Streakit":
            try:
                with open(TIEDOSTOT["Streakit"], encoding="utf-8") as f:
                    streak_data = json.load(f)
                data = streak_data.get(uid, {})
                embed.add_field(name="üìÖ P√§ivitt√§inen streak", value=f'{data.get("daily", {}).get("streak", 0)} p√§iv√§√§', inline=False)
                embed.add_field(name="üìÜ Viikoittainen streak", value=f'{data.get("weekly", {}).get("streak", 0)} viikkoa', inline=False)
                embed.add_field(name="üóìÔ∏è Kuukausittainen streak", value=f'{data.get("monthly", {}).get("streak", 0)} kuukautta', inline=False)
            except Exception as e:
                embed.add_field(name="‚ö†Ô∏è Virhe", value=f"Streak-datan lataus ep√§onnistui: {e}", inline=False)

        elif kategoria == "Ostokset":
            try:
                ostosviestit = await hae_ostosviestit(str(user.id))
                if ostosviestit:
                    embed.add_field(
                        name="üõí Ostoksia tehty",
                        value=f"{len(ostosviestit)} kpl",
                        inline=True
                    )

                    yhteens√§_xp = 0  

                    for viesti in ostosviestit[:5]:
                        pvm = viesti.created_at.strftime("%d.%m.%Y %H:%M")
                        match = re.search(r"osti tuotteen (.+?) \((\d+) XP\)", viesti.content)
                        tuote = match.group(1) if match else "Tuntematon tuote"
                        hinta = int(match.group(2)) if match else 0
                        yhteens√§_xp += hinta
                        embed.add_field(
                            name=f"üßæ {tuote}",
                            value=f"üí∞ {hinta} XP\nüóìÔ∏è {pvm}",
                            inline=False
                        )

                    embed.add_field(
                        name="üßÆ XP-k√§ytt√∂ yhteens√§",
                        value=f"{yhteens√§_xp} XP (vain 5 viimeisint√§ ostosta huomioitu)",
                        inline=False
                    )
                else:
                    embed.add_field(name="üõí Ostokset", value="Ei ostoksia kirjattuna.", inline=False)
            except Exception as e:
                embed.add_field(name="‚ö†Ô∏è Virhe", value=f"Ostosviestien k√§sittely ep√§onnistui: {e}", inline=False)

        elif kategoria == "Tarjous":
            tarjousviestit = await hae_tarjousviestit(uid)
            if tarjousviestit:
                for viesti in tarjousviestit[:5]:
                    aika = viesti.created_at.strftime("%d.%m.%Y %H:%M")    
                    teksti = re.sub(r" ?\([^)]*\)", "", viesti.content).strip()
                    embed.add_field(name="üéÅ Tarjous", value=f"{teksti}\nüóìÔ∏è {aika}", inline=False)
            else:
                embed.add_field(name="üéÅ Tarjous", value="Ei l√∂ydettyj√§ tarjousviestej√§.", inline=False)
        
        elif kategoria == "Kuponki":
            try:
                uid = str(uid)

                try:
                    with open(TIEDOSTOT["Kuponki"], encoding="utf-8") as f:
                        tapahtumat_data = json.load(f)
                    tapahtumat = tapahtumat_data.get(uid, [])
                except Exception as e:
                    tapahtumat = []
                    print(f"Kuponkitapahtumien lataus ep√§onnistui: {e}")

                try:
                    with open(JSON_DIRS / "kuponki.json", encoding="utf-8") as f:
                        kuponki_data = json.load(f)
                except Exception as e:
                    kuponki_data = {}
                    print(f"Kuponkidatan lataus ep√§onnistui: {e}")

                try:
                    with open(JSON_DIRS / "tuotteet.json", encoding="utf-8") as f:
                        tuotteet_lista = json.load(f)
                except Exception as e:
                    tuotteet_lista = []
                    print(f"Tuotedatan lataus ep√§onnistui: {e}")

                try:
                    with open(JSON_DIRS / "ostot.json", encoding="utf-8") as f:
                        ostot_data = json.load(f)
                    ostot = ostot_data.get(uid, [])
                except Exception as e:
                    ostot = []
                    print(f"Ostotiedoston lataus ep√§onnistui: {e}")

                def hae_tuotteen_hinta(nimi: str) -> int:
                    for tuote in tuotteet_lista:
                        if tuote.get("nimi") == nimi:
                            return int(tuote.get("hinta", 0))
                    return 0

                def hae_tarjousprosentti(nimi: str) -> int:
                    for tuote in tuotteet_lista:
                        if tuote.get("nimi") == nimi:
                            return int(tuote.get("tarjousprosentti", 0))
                    return 0

                laskuri = Counter()
                tuotteet = {}
                s√§√§st√∂_yhteens√§ = 0

                for tapahtuma in tapahtumat:
                    kuponki = tapahtuma.get("kuponki", "Tuntematon")
                    tuote = tapahtuma.get("tuote", "Tuntematon tuote")
                    aika = tapahtuma.get("aika", "?")
                    laskuri[kuponki] += 1
                    tuotteet.setdefault(kuponki, []).append((tuote, aika))

                    prosentti = kuponki_data.get(kuponki, {}).get("prosentti", 0)
                    hinta = hae_tuotteen_hinta(tuote)
                    tuote_prosentti = hae_tarjousprosentti(tuote)

                    kokonaisprosentti = prosentti + tuote_prosentti
                    if hinta and kokonaisprosentti:
                        s√§√§st√∂ = hinta * (kokonaisprosentti / 100)
                        s√§√§st√∂_yhteens√§ += s√§√§st√∂

                if not tapahtumat:
                    for kuponki_nimi, kuponki_info in kuponki_data.items():
                        kayttajat_dict = kuponki_info.get("kayttajat_dict", {})
                        kayttoja = kayttajat_dict.get(uid, 0)
                        if kayttoja > 0:
                            laskuri[kuponki_nimi] = kayttoja
                            tuotteet[kuponki_nimi] = [("?", "?")] * kayttoja
                            prosentti = kuponki_info.get("prosentti", 0)
                            hinta = 1000  
                            s√§√§st√∂_yhteens√§ += kayttoja * hinta * (prosentti / 100)

                for ostos in ostot:
                    nimi_raw = ostos.get("nimi", "")
                    nimi = nimi_raw.replace(" (Tarjous!)", "").strip()

                    normihinta = hae_tuotteen_hinta(nimi)
                    ostohinta = None

                    for kuponki_nimi, kuponki_info in kuponki_data.items():
                        if kuponki_nimi in nimi_raw:
                            prosentti = kuponki_info.get("prosentti", 0)
                            ostohinta = int(normihinta * (1 - prosentti / 100))
                            s√§√§st√∂ = normihinta - ostohinta
                            if s√§√§st√∂ > 0:
                                s√§√§st√∂_yhteens√§ += s√§√§st√∂
                            break

                    if ostohinta is None and "Tarjous" in nimi_raw:
                        for tuote in tuotteet_lista:
                            if tuote.get("nimi") == nimi:
                                tarjous_prosentti = tuote.get("tarjousprosentti", 0)
                                ostohinta = int(normihinta * (1 - tarjous_prosentti / 100))
                                s√§√§st√∂ = normihinta - ostohinta
                                if s√§√§st√∂ > 0:
                                    s√§√§st√∂_yhteens√§ += s√§√§st√∂
                                break

                embed.add_field(name="üìä K√§ytetyt kupongit", value=f"{sum(laskuri.values())} kertaa", inline=True)

                for kuponki, m√§√§r√§ in laskuri.items():
                    rivit = [f"‚Ä¢ {tuote} ({aika[:10]})" for tuote, aika in tuotteet[kuponki][:3]]

                    kuponki_info = kuponki_data.get(kuponki, {})
                    kayttajat_dict = kuponki_info.get("kayttajat_dict", {})
                    kayttoja = kayttajat_dict.get(uid, 0)
                    max_per = kuponki_info.get("maxkayttoja_per_jasen", "‚àû")

                    embed.add_field(
                        name=f"üéüÔ∏è {kuponki} ({m√§√§r√§}√ó, k√§ytetty {kayttoja}/{max_per})",
                        value="\n".join(rivit),
                        inline=False
                    )

                if ostot:
                    rivit = [f"‚Ä¢ {ostos['nimi']} ({ostos['pvm'][:10]})" for ostos in ostot[:5]]
                    embed.add_field(
                        name="üõí Ostetut tuotteet",
                        value="\n".join(rivit),
                        inline=False
                    )

                embed.add_field(
                    name="üí∏ Arvioitu XP-s√§√§st√∂",
                    value=f"{int(s√§√§st√∂_yhteens√§)} XP",
                    inline=False
                )

                if not laskuri and not ostot:
                    embed.add_field(
                    name="üéüÔ∏è Kuponkiaktiivisuus",
                    value="Ei kuponkien k√§ytt√∂√§ tai ostoksia tallennettuna.",
                    inline=False
                )

            except Exception as e:
                embed.add_field(name="‚ö†Ô∏è Virhe", value=f"Kuponkidatan k√§sittely ep√§onnistui: {e}", inline=False)

        elif kategoria == "Puhe-streak":
            try:
                with open(TIEDOSTOT["Puhe-streak"], encoding="utf-8") as f:
                    data = json.load(f)

                puhedata = data.get(str(user.id))

                if puhedata:
                    streak = puhedata.get("streak", 0)
                    pisin = puhedata.get("pisin", streak)
                    pvm_str = puhedata.get("pvm")

                    try:
                        viimeisin_pvm = datetime.strptime(pvm_str, "%Y-%m-%d")
                        alku = viimeisin_pvm - timedelta(days=streak - 1)
                    except Exception:
                        viimeisin_pvm = datetime.today()
                        alku = viimeisin_pvm - timedelta(days=streak - 1)

                    alku_str = alku.strftime("%d.%m.%Y")
                    viimeisin_str = viimeisin_pvm.strftime("%d.%m.%Y")

                    embed.add_field(
                        name="üé§ Puhe-streak",
                        value=(
                            f"üî• {streak} p√§iv√§√§\n"
                            f"üìÖ Alkoi: {alku_str}\n"
                            f"üìÖ Viimeisin p√§iv√§: {viimeisin_str}\n"
                            f"üèÜ Pisin streak: {pisin} p√§iv√§√§\n"
                        ),
                        inline=False
                    )
                else:
                    embed.add_field(
                        name="üé§ Puhe-streak",
                        value="Ei puheaktiivisuutta tallennettuna.",
                        inline=False
                    )
            except Exception as e:
                embed.add_field(
                    name="‚ö†Ô∏è Virhe",
                    value=f"Puhe-streakin lataus ep√§onnistui: {e}",
                    inline=False
                )

        elif kategoria == "XP-data":
            uid = str(user.id)
            teht√§v√§viestit = await hae_teht√§v√§viestit(uid)

            try:
                with open(TIEDOSTOT.get("Streakit"), encoding="utf-8") as f:
                    streaks = json.load(f)

                daily = streaks.get(uid, {}).get("daily", {}).get("streak", 0)
                weekly = streaks.get(uid, {}).get("weekly", {}).get("streak", 0)
                monthly = streaks.get(uid, {}).get("monthly", {}).get("streak", 0)

                if monthly >= 1:
                    xp_per_task = 150
                elif weekly >= 1:
                    xp_per_task = 100
                elif daily >= 1:
                    xp_per_task = 50
                else:
                    xp_per_task = 50

            except Exception as e:
                xp_per_task = 50
                print("Streak XP-arvio ep√§onnistui:", e)

            m√§√§r√§ = len(teht√§v√§viestit)
            teht√§v√§_xp = m√§√§r√§ * xp_per_task

            try:
                with open(TIEDOSTOT["XP-data"], "r", encoding="utf-8") as f:
                    xp_data = json.load(f)
                tallennettu_xp = xp_data.get(uid, {}).get("xp", 0)
            except Exception as e:
                tallennettu_xp = 0
                embed.add_field(name="‚ö†Ô∏è Virhe", value=f"XP-datan lataus ep√§onnistui: {e}", inline=False)

            arvio_viesti_xp = max(0, tallennettu_xp - teht√§v√§_xp)
            teht√§v√§_prosentti = (teht√§v√§_xp / tallennettu_xp) * 100 if tallennettu_xp > 0 else 0
            viesti_prosentti = (arvio_viesti_xp / tallennettu_xp) * 100 if tallennettu_xp > 0 else 0

            embed = discord.Embed(
                title="üî¢ XP-raportti",
                description=f"K√§ytt√§j√§n {user.display_name} XP-erittely",
                color=discord.Color.blue()
            )

            embed.add_field(name="üß© XP-erittely", value=(
                f"üìò Teht√§vist√§ arvioitu: {teht√§v√§_xp} XP\n"
                f"üîç Arvio viestipohjaisesta XP:st√§: {arvio_viesti_xp} XP\n"
                f"‚ú® Tallennettu yhteens√§: {tallennettu_xp} XP"
            ), inline=False)

            embed.add_field(name="üìà XP-jakauma (%)", value=(
                f"üìò Teht√§v√§t: {teht√§v√§_prosentti:.1f}%\n"
                f"üîé Viestit: {viesti_prosentti:.1f}%"
            ), inline=False)

            if teht√§v√§_xp > tallennettu_xp:
                embed.add_field(name="‚ö†Ô∏è Huomautus", value=(
                    "Teht√§vist√§ arvioitu XP on suurempi kuin tallennettu. Voi viitata tallennusvirheeseen."
                ), inline=False)

    if kategoria == "Moderointi":
        varoituskanava = bot.get_channel(int(os.getenv("MODLOG_CHANNEL_ID")))
        mutekanava = bot.get_channel(int(os.getenv("MUTE_CHANNEL_ID")))
        helpkanava = bot.get_channel(int(os.getenv("HELP_CHANNEL_ID")))

        varoitukset = []
        mute_tiedot = []
        helppyynto = []

        async for msg in varoituskanava.history(limit=1000):
            if f"ID: {user.id}" in msg.content:
                try:
                    syy = msg.content.split("Syy: ")[-1].split(" |")[0]
                    antaja = msg.content.split("Antaja: ")[-1].split("\n")[0]
                    aika = msg.created_at.strftime("%d.%m.%Y %H:%M")
                    varoitukset.append({
                        "syy": syy,
                        "antaja": antaja,
                        "aika": aika
                    })
                except Exception:
                    continue

        async for msg in mutekanava.history(limit=1000):
            if "üîá" in msg.content and "J√§√§hy" in msg.content:
                try:
                    rivit = msg.content.splitlines()
                    k√§ytt√§j√§_rivi = next((r for r in rivit if r.startswith("üë§")), "")

                    if not any(x in k√§ytt√§j√§_rivi for x in [user.mention, str(user.id), user.name]):
                        continue

                    tyyppi = "Automaattinen" if "(automaattinen)" in rivit[0] else "Manuaalinen"

                    kesto_rivi = next((r for r in rivit if "‚è±" in r), "")
                    if "Kesto:" in kesto_rivi:
                        kesto = kesto_rivi.split("Kesto: ", 1)[-1]
                    elif ": " in kesto_rivi:
                        kesto = kesto_rivi.split(": ", 1)[-1]
                    else:
                        kesto = kesto_rivi.replace("‚è±", "").strip()

                    syy_rivi = next((r for r in rivit if "üìù" in r), "")
                    if "Syy:" in syy_rivi:
                        syy = syy_rivi.split("Syy: ", 1)[-1]
                    elif ": " in syy_rivi:
                        syy = syy_rivi.split(": ", 1)[-1]
                    else:
                        syy = syy_rivi.replace("üìù", "").strip()

                    asettaja_rivi = next((r for r in rivit if "üëÆ" in r), "")
                    if "Asetti:" in asettaja_rivi:
                        asettaja = asettaja_rivi.split("Asetti: ", 1)[-1]
                    elif ": " in asettaja_rivi:
                        asettaja = asettaja_rivi.split(": ", 1)[-1]
                    else:
                        asettaja = asettaja_rivi.replace("üëÆ", "").strip()

                    aika = msg.created_at.strftime("%d.%m.%Y %H:%M")

                    mute_tiedot.append({
                        "kesto": kesto,
                        "syy": syy,
                        "asettaja": asettaja,
                        "aika": aika,
                        "tyyppi": tyyppi,
                    })
                except Exception as e:
                    print(f"Virhe mute-viestiss√§: {e}")
                    continue

        async for msg in helpkanava.history(limit=500):
            if msg.embeds:
                embed_obj = msg.embeds[0]
                footer = embed_obj.footer.text if embed_obj.footer else ""
                if f"({user.id})" in footer:
                    helppyynto.append(msg)

        embed = discord.Embed(title=f"üìã K√§ytt√§j√§n {user.name} raportti", color=discord.Color.blue())

        if varoitukset:
            embed.add_field(name="‚ö†Ô∏è Varoitukset", value=f"{len(varoitukset)} kpl", inline=False)
            for i, data in enumerate(varoitukset[:2]):
                embed.add_field(
                    name=f"‚ö†Ô∏è Varoitus {i+1}",
                    value=f"üìù Syy: {data['syy']}\nüëÆ Antaja: {data['antaja']}\nüïí {data['aika']}",
                    inline=False
                )
        else:
            embed.add_field(name="‚úÖ Ei varoituksia", value="K√§ytt√§j√§ll√§ ei ole merkint√∂j√§.", inline=False)

        if mute_tiedot:
            embed.add_field(name="üîá J√§√§hyt (mute)", value=f"{len(mute_tiedot)} kertaa", inline=False)
            for i, tiedot in enumerate(mute_tiedot[:2]):
                embed.add_field(
                    name=f"üîí J√§√§hy {i+1}",
                    value=(
                        f"üïí {tiedot['aika']}\n"
                        f"üïì Kesto: {tiedot['kesto']}\n"
                        f"üìù Syy: {tiedot['syy']}\n"
                        f"üëÆ Asetti: {tiedot['asettaja']}\n"
                        f"‚öôÔ∏è Tyyppi: {tiedot['tyyppi']}\n"
                    ),
                    inline=False
                )
        else:
            embed.add_field(name="‚úÖ Ei j√§√§hyj√§", value="K√§ytt√§j√§ll√§ ei ole j√§√§hymerkint√∂j√§.", inline=False)

        if helppyynto:
            helppyynto.sort(key=lambda m: m.created_at, reverse=True)
            embed.add_field(name="üÜò Help-pyynn√∂t", value=f"Pyynt√∂j√§: {len(helppyynto)}", inline=False)
            for viesti in helppyynto[:2]:
                try:
                    embed_obj = viesti.embeds[0]
                    kentat = embed_obj.fields
                    otsikko = kentat[0].value if len(kentat) > 0 else "üíÅ Help-pyynt√∂"
                    kuvaus = kentat[1].value if len(kentat) > 1 else "Ei kuvausta"
                    kuvaus = (kuvaus[:300] + "...") if len(kuvaus) > 300 else kuvaus
                    aika = viesti.created_at.strftime("%d.%m.%Y %H:%M")
                    tila = "‚ùå Suljettu" if "‚Ä¢ Suljettu" in embed_obj.footer.text else "‚úÖ Vastattu"
                    linkki = f"https://discord.com/channels/{viesti.guild.id}/{viesti.channel.id}/{viesti.id}"
                    embed.add_field(
                        name="üì• Pyynt√∂",
                        value=f"**{otsikko}**\n{kuvaus}\nüïí {aika}\nüìå Tila: {tila}",
                        inline=False
                    )
                except Exception:
                    continue
        else:
            embed.add_field(name="‚úÖ Ei help-pyynt√∂j√§", value="K√§ytt√§j√§lt√§ ei l√∂ytynyt pyynt√∂j√§.", inline=False)

    elif kategoria == "Komennot":
        await interaction.response.defer(ephemeral=True)

        lataus_embed = discord.Embed(
            title="‚è≥ Ladataan tietoja...",
            description="‚Ä¢ Haetaan komentostatistiikkaa\n‚Ä¢ Analysoidaan viestilokit\n\n_T√§m√§ voi kest√§√§ hetken..._",
            color=discord.Color.orange()
        )
        msg = await interaction.followup.send(embed=lataus_embed, ephemeral=True)

        embed = discord.Embed(title="üìä Komentostatistiikka", color=discord.Color.blue())

        try:
            log_channel_id = int(os.getenv("LOG_CHANNEL_ID"))
            log_channel = bot.get_channel(log_channel_id)
            laskuri = Counter()

            if log_channel:
                async for msg_log in log_channel.history(limit=1000):
                    if f"({user.id})" in msg_log.content:
                        match = re.search(r"Komento: `(.+?)`", msg_log.content)
                        if match:
                            komento = match.group(1)
                            laskuri[komento] += 1

                if laskuri:
                    yhteens√§ = sum(laskuri.values())
                    rivit = [f"- `{komento}` ({m√§√§r√§}√ó)" for komento, m√§√§r√§ in laskuri.most_common(5)]
                    embed.add_field(name="üí¨ Komentoja k√§ytetty", value=f"{yhteens√§} kertaa", inline=True)
                    embed.add_field(name="üìå K√§ytetyimm√§t komennot", value="\n".join(rivit), inline=False)
                else:
                    embed.add_field(name="üìå K√§ytetyimm√§t komennot", value="Et ole k√§ytt√§nyt viel√§ komentoja.", inline=False)
            else:
                embed.add_field(name="üìå K√§ytetyimm√§t komennot", value="Lokikanavaa ei l√∂ytynyt.", inline=False)

        except Exception as e:
            embed.add_field(name="‚ö†Ô∏è Virhe", value=f"Komentodatan lataus ep√§onnistui: {e}", inline=False)

        embed.set_footer(text="‚úÖ Lataus valmis ‚Ä¢ Voit sulkea t√§m√§n viestin, kun olet valmis.")
        await msg.edit(embed=embed, view=KategoriaView(user, "Komennot", alkuper√§inen_k√§ytt√§j√§=interaction.user))

    elif kategoria == "Toiminta":
        await interaction.response.defer(ephemeral=True)

        lataus_embed = discord.Embed(
            title="‚è≥ Ladataan analyysi√§...",
            description="‚Ä¢ Ker√§t√§√§n viestihistoriaa\n‚Ä¢ Lasketaan kanavaaktiivisuus\n‚Ä¢ Selvitet√§√§n aktiivisin kanava\n\n_T√§m√§ voi kest√§√§ hetken...._",
            color=discord.Color.orange()
        )
        msg = await interaction.followup.send(embed=lataus_embed, ephemeral=True)

        try:
            analyysi = J√§senToimintaAnalyysi(user)
            guild = interaction.guild
            if not guild:
                embed = discord.Embed(title="üìà Toiminta-analyysi", color=discord.Color.red())
                embed.add_field(name="‚ö†Ô∏è Virhe", value="Guild-objektia ei voitu saada.", inline=False)
            else:
                await analyysi.analysoi(guild=guild, limit=1000)

                embed = discord.Embed(
                    title="üìà Toiminta-analyysi",
                    description="T√§ss√§ tulokset j√§senen aktiivisuudesta.",
                    color=discord.Color.blue()
                )

                aktiivisin, m√§√§r√§ = analyysi.aktiivisin()
                if aktiivisin:
                    embed.add_field(name="üí¨ Aktiivisin kanava", value=f"{aktiivisin.mention} ({m√§√§r√§} viesti√§)", inline=False)
                else:
                    embed.add_field(name="üí¨ Aktiivisin kanava", value="Ei l√§hetettyj√§ viestej√§ viimeaikaisesti.", inline=False)

                embed.add_field(name="üìä Analysoitu viestim√§√§r√§", value=f"{sum(analyysi.kanavam√§√§r√§t.values())} viesti√§", inline=False)

                try:
                    voice_data_path = Path(os.getenv("XP_VOICE_DATA_FILE"))
                    if voice_data_path.exists():
                        with open(voice_data_path, encoding="utf-8") as f:
                            voice_data = json.load(f)

                        user_id_str = str(user.id)
                        sekunnit = int(voice_data.get("total_voice_usage", {}).get(user_id_str, 0))
                        kesto = str(timedelta(seconds=sekunnit))
                        embed.add_field(name="üéôÔ∏è Puhuttu yhteens√§", value=f"{kesto}", inline=False)

                        voice_channels = voice_data.get("voice_channels", {}).get(user_id_str, {})
                        if voice_channels:
                            suosituin_id = max(voice_channels, key=voice_channels.get)
                            suosituin_kanava = guild.get_channel(int(suosituin_id))
                            aika = str(timedelta(seconds=voice_channels[suosituin_id]))
                            if suosituin_kanava:
                                embed.add_field(name="üì¢ Eniten k√§ytetty puhekanava", value=f"{suosituin_kanava.mention} ({aika})", inline=False)
                            else:
                                embed.add_field(name="üì¢ Eniten k√§ytetty puhekanava", value=f"ID {suosituin_id} ({aika})", inline=False)
                        else:
                            embed.add_field(name="üì¢ Eniten k√§ytetty puhekanava", value="Ei puhekanavatietoja saatavilla.", inline=False)
                    else:
                        embed.add_field(name="üéôÔ∏è Puheaktiivisuus", value="Ei puhedataa saatavilla.", inline=False)
                except Exception as e:
                    embed.add_field(name="‚ö†Ô∏è Virhe puheaktiivisuudessa", value=f"Tietojen lataus ep√§onnistui: {e}", inline=False)

                embed.set_footer(text="‚úÖ Lataus valmis ‚Ä¢ Voit sulkea t√§m√§n viestin, kun olet valmis.")
                await msg.edit(embed=embed, view=KategoriaView(user, "Toiminta", alkuper√§inen_k√§ytt√§j√§=interaction.user))

        except Exception as e:
            virhe_embed = discord.Embed(title="üìà Toiminta-analyysi", color=discord.Color.red())
            virhe_embed.add_field(name="‚ö†Ô∏è Virhe", value=f"Aktiivisuusdatan lataus ep√§onnistui: {e}", inline=False)
            await msg.edit(embed=virhe_embed, view=KategoriaView(user, "Toiminta", alkuper√§inen_k√§ytt√§j√§=interaction.user))

    try:
        avaimet = AVAIMET_KATEGORIALLE.get(kategoria)
        if not avaimet:
            polku = TIEDOSTOT.get(kategoria)
            if polku and polku.exists():
                with open(polku, encoding="utf-8") as f:
                    tiedot = json.load(f)
                k√§ytt√§j√§data = tiedot.get(str(user.id), {})
                if isinstance(k√§ytt√§j√§data, dict):
                    avaimet = list(k√§ytt√§j√§data.keys())
    except Exception:
        avaimet = []

    avaimet_str = ", ".join(avaimet) if avaimet else "Ei ladattavia avaimia"

    embed.set_footer(
        text=f"üìÅ Tiedot p√§ivittyv√§t reaaliaikaisesti ‚Ä¢ üîë Ladattavissa olevat tiedot: {avaimet_str}"
    )
    return embed

class DataValintaView(ui.View):
    def __init__(self, user, alkuper√§inen_k√§ytt√§j√§=None):
        super().__init__(timeout=None)
        self.user = user
        self.alkuper√§inen_k√§ytt√§j√§ = alkuper√§inen_k√§ytt√§j√§ or user
        for nimi in KATEGORIAT:
            self.add_item(KategoriaNappi(nimi, user=self.user, alkuper√§inen_k√§ytt√§j√§=self.alkuper√§inen_k√§ytt√§j√§))

    async def interaction_check(self, interaction):
        return interaction.user.id == self.alkuper√§inen_k√§ytt√§j√§.id

async def k√§sittele_valinta(user: discord.User, valinta: str, interaction: discord.Interaction):
    await interaction.response.defer(ephemeral=True)

    odotus_embed = discord.Embed(
        title="‚è≥ Ladataan...",
        description=f"Haetaan tietoja kategoriasta: **{valinta}**...",
        color=discord.Color.orange()
    )

    msg = await interaction.followup.send(embed=odotus_embed, ephemeral=True)

    try:
        embed = await muodosta_kategoria_embed(valinta, user, bot, interaction)

        await msg.edit(
            content=f"üìÅ Kategoria: {valinta}",
            embed=embed,
            view=KategoriaView(user, valinta)
        )
    except Exception as e:
        print(f"k√§sittele_valinta virhe: {e}")
        await msg.edit(content="‚ùå Virhe tiedonhaussa.", embed=None)

class KategoriaNappi(ui.Button):
    def __init__(self, nimi, user, alkuper√§inen_k√§ytt√§j√§):
        super().__init__(label=nimi, style=discord.ButtonStyle.primary)
        self.nimi = nimi
        self.user = user
        self.alkuper√§inen_k√§ytt√§j√§ = alkuper√§inen_k√§ytt√§j√§
        self.bot = bot

    async def callback(self, interaction):
        try:
            embed = await muodosta_kategoria_embed(self.nimi, self.user, self.bot, interaction)
            await interaction.response.edit_message(
                content=f"üìÅ Kategoria: {self.nimi}",
                embed=embed,
                view=KategoriaView(self.user, self.nimi, alkuper√§inen_k√§ytt√§j√§=self.alkuper√§inen_k√§ytt√§j√§)
            )
        except Exception as e:
            print(f"Embedin luonti ep√§onnistui: {e}")
            await interaction.response.send_message("‚ùå Virhe n√§kym√§n avaamisessa.", ephemeral=True)

AVAIMET_KATEGORIALLE = {
    "XP-data": ["xp", "level"],
    "XP-streakit": ["streak", "pvm"],
    "Streakit": ["streak"],
    "Puhe-streak": ["streak", "pvm", "pisin"],  
}

class KategoriaView(ui.View):
    def __init__(self, user, valittu=None, alkuper√§inen_k√§ytt√§j√§=None):
        super().__init__(timeout=None)
        self.user = user
        self.kategoria = valittu
        self.alkuper√§inen_k√§ytt√§j√§ = alkuper√§inen_k√§ytt√§j√§ or user

        if not valittu:
            for nimi in KATEGORIAT:
                self.add_item(KategoriaNappi(nimi, user, alkuper√§inen_k√§ytt√§j√§=self.alkuper√§inen_k√§ytt√§j√§))
        else:
            self.add_item(PalaaNappi(user))
            self.add_item(LataaNappi(valittu, user, AVAIMET_KATEGORIALLE.get(valittu, [])))

            if valittu != "Moderointi":
                self.add_item(PoistaNappi(valittu, user, AVAIMET_KATEGORIALLE.get(valittu, [])))
            else:
                self.add_item(IlmoitaPoistopyynt√∂Nappi(valittu, user, AVAIMET_KATEGORIALLE.get(valittu, [])))

    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        return interaction.user.id in {self.user.id, self.alkuper√§inen_k√§ytt√§j√§.id}

class KatsoNappi(ui.Button):
    def __init__(self, user):
        super().__init__(label="Katso tiedot", style=discord.ButtonStyle.secondary)
        self.user = user

    async def callback(self, interaction):
        try:
            await interaction.response.edit_message(
                content="üìÅ Valitse kategoria, jonka tiedot haluat n√§hd√§:",
                embed=None,
                view=KategoriaView(self.user, None, alkuper√§inen_k√§ytt√§j√§=interaction.user)
            )
        except discord.NotFound:
            print("‚ö†Ô∏è Interaktio vanhentunut ‚Äî k√§ytet√§√§n followup.send")
            await interaction.followup.send(
                content="üìÅ Valitse kategoria, jonka tiedot haluat n√§hd√§:",
                embed=None,
                view=KategoriaView(self.user, None, alkuper√§inen_k√§ytt√§j√§=interaction.user),
                ephemeral=True
            )
        except Exception as e:
            print(f"KatsoNappi virhe: {e}")
            await interaction.response.send_message("‚ùå Virhe n√§kym√§n avaamisessa.", ephemeral=True)

class PalaaNappi(ui.Button):
    def __init__(self, user, nimi="P√§√§valinta"):
        super().__init__(label="üîô Palaa alkuun", style=discord.ButtonStyle.secondary)
        self.user = user
        self.nimi = nimi

    async def callback(self, interaction):
        try:
            await interaction.response.edit_message(
                content="üìÅ Valitse kategoria, jonka tiedot haluat n√§hd√§:",
                embed=None,
                view=KategoriaView(self.user, None, alkuper√§inen_k√§ytt√§j√§=interaction.user)
            )
        except discord.NotFound:
            print("‚ö†Ô∏è Interaktio vanhentunut ‚Äî k√§ytet√§√§n followup.send")
            await interaction.followup.send(
                content="üìÅ Valitse kategoria, jonka tiedot haluat n√§hd√§:",
                embed=None,
                view=KategoriaView(self.user, None, alkuper√§inen_k√§ytt√§j√§=interaction.user),
                ephemeral=True
            )
        except Exception as e:
            print(f"PalaaNappi virhe: {e}")
            await interaction.response.send_message("‚ùå Virhe n√§kym√§n avaamisessa.", ephemeral=True)

class LataaNappi(ui.Button):
    def __init__(self, nimi, user, avaimet=None):
        super().__init__(label="Lataa tiedot", style=discord.ButtonStyle.success)
        self.nimi = nimi
        self.user = user
        self.avaimet = avaimet or []

    async def callback(self, interaction: discord.Interaction):
        path = TIEDOSTOT.get(self.nimi)
        if not path or not path.exists():
            await interaction.response.send_message("‚ùå Tiedostoa ei l√∂ytynyt.", ephemeral=True)
            return

        try:
            with open(path, encoding="utf-8") as f:
                raw_data = f.read()

            tiedostonimi = f"{self.nimi}_{self.user.id}.txt"
            kanava = bot.get_channel(MOD_LOG_CHANNEL_ID)
            if not kanava:
                await interaction.response.send_message("‚ö†Ô∏è Ilmoituskanavaa ei l√∂ytynyt.", ephemeral=True)
                return

            await l√§het√§_lataus_lokiviesti(
                kanava=kanava,
                pyyt√§j√§=interaction.user,
                k√§ytt√§j√§=self.user,
                nimi=self.nimi,
                avaimet=self.avaimet,
                tekstitiedosto=raw_data,
                tiedostonimi=tiedostonimi
            )

            await interaction.response.send_message("‚úÖ Latauspyynt√∂ l√§hetetty moderaattoreille vahvistusta varten.", ephemeral=True)

        except Exception as e:
            await interaction.response.send_message(f"‚ö†Ô∏è Lataus ep√§onnistui: {e}", ephemeral=True)

class PoistaNappi(ui.Button):
    def __init__(self, nimi, user, avaimet: list[str] = None):
        super().__init__(label="Poista tiedot", style=discord.ButtonStyle.danger)
        self.nimi = nimi
        self.user = user

        if not avaimet:
            polku = TIEDOSTOT.get(nimi)
            if polku and polku.exists():
                try:
                    with open(polku, encoding="utf-8") as f:
                        data = json.load(f)
                    k√§ytt√§j√§data = data.get(str(user.id), {})
                    if isinstance(k√§ytt√§j√§data, dict):
                        self.avaimet = list(k√§ytt√§j√§data.keys())
                    else:
                        self.avaimet = []
                except Exception:
                    self.avaimet = []
            else:
                self.avaimet = []
        else:
            self.avaimet = avaimet

    async def callback(self, interaction: discord.Interaction):
        kanava = bot.get_channel(MOD_LOG_CHANNEL_ID)
        if not kanava:
            await interaction.response.send_message("‚ö†Ô∏è Ilmoituskanavaa ei l√∂ytynyt.", ephemeral=True)
            return

        await l√§het√§_poisto_lokiviesti(
            kanava=kanava,
            poistaja=interaction.user,
            k√§ytt√§j√§=self.user,
            nimi=self.nimi,
            avaimet=self.avaimet
        )
        await interaction.response.send_message("‚úÖ Poistopyynt√∂ l√§hetetty moderaattoreille vahvistusta varten.", ephemeral=True)

class IlmoitaPoistopyynt√∂Nappi(ui.Button):
    def __init__(self, nimi, user, avaimet: list[str] = None):
        super().__init__(label="Ilmoita virhe / poisto", style=discord.ButtonStyle.danger)
        self.nimi = nimi
        self.user = user
        self.avaimet = avaimet or []

    async def callback(self, interaction: discord.Interaction):
        kanava = bot.get_channel(MOD_LOG_CHANNEL_ID)
        if kanava:
            await kanava.send(
                f"üóëÔ∏è **Poistopyynt√∂ / Virheilmoitus**\n"
                f"üìÅ Kategoria: {self.nimi}\n"
                f"üë§ K√§ytt√§j√§: {self.user.mention} ({self.user.id})\n"
                f"üóÇÔ∏è Avaimet: {', '.join(self.avaimet) if self.avaimet else 'Kaikki'}\n"
                f"üëÆ Ilmoittaja: {interaction.user.mention} ({interaction.user.id})\n"
                f"üïí Aika: <t:{int(discord.utils.utcnow().timestamp())}:F>"
            )
            await interaction.response.send_message(
                "‚úÖ Ilmoitus moderaattoreille l√§hetetty. He tarkistavat ja k√§sittelev√§t asian.",
                ephemeral=True
            )
        else:
            await interaction.response.send_message("‚ö†Ô∏è Ilmoituskanavaa ei l√∂ytynyt.", ephemeral=True)

class IlmoitaVirheNappi(ui.Button):
    def __init__(self, user):
        super().__init__(label="Ilmoita virheest√§", style=discord.ButtonStyle.danger)
        self.user = user

    async def callback(self, interaction):
        modlog = bot.get_channel(MOD_LOG_CHANNEL_ID)
        if modlog:
            await modlog.send(
                f"üö® *Varoitusvirhe-ilmoitus*\nKohde: {self.user.mention} ({self.user.id})\nIlmoittaja: {interaction.user.mention} ({interaction.user.id})\nAika: <t:{int(discord.utils.utcnow().timestamp())}:F>"
            )
        await interaction.response.send_message("‚úÖ Ilmoitus l√§hetetty moderaattoreille.", ephemeral=True)

async def logita_poisto(poistaja: discord.User, kohde: str, k√§ytt√§j√§: discord.User, avaimet: list[str]):
    kanava = bot.get_channel(MOD_LOG_CHANNEL_ID)
    if kanava:
        await kanava.send(
            f"üóëÔ∏è **Poistopyynt√∂:** `{kohde}`\n"
            f"üë§ Kohdek√§ytt√§j√§: {k√§ytt√§j√§.mention} ({k√§ytt√§j√§.id})\n"
            f"üîë Avaimet: {', '.join(avaimet) if avaimet else 'Kaikki tiedot'}\n"
            f"üëÆ Pyynt√∂ tehty: {poistaja.mention} ({poistaja.id})\n"
            f"üïí Aika: <t:{int(discord.utils.utcnow().timestamp())}:F>\n"
            f"‚ö†Ô∏è Poisto on suoritettava manuaalisesti tarkistuksen j√§lkeen."
        )

async def logita_lataus(pyyt√§j√§: discord.User, kohde: str, k√§ytt√§j√§: discord.User, avaimet: list[str]):
    kanava = bot.get_channel(MOD_LOG_CHANNEL_ID)
    if kanava:
        await kanava.send(
            f"üì• **Latauspyynt√∂:** `{kohde}`\n"
            f"üë§ Kohdek√§ytt√§j√§: {k√§ytt√§j√§.mention} ({k√§ytt√§j√§.id})\n"
            f"üîë Avaimet: {', '.join(avaimet) if avaimet else 'Kaikki tiedot'}\n"
            f"üì® Pyyt√§j√§: {pyyt√§j√§.mention} ({pyyt√§j√§.id})\n"
            f"üïí Aika: <t:{int(discord.utils.utcnow().timestamp())}:F>\n"
            f"üìé Tiedosto toimitetaan yksityisviestill√§."
        )

async def l√§het√§_vahvistus_dm(k√§ytt√§j√§: discord.User, tiedostonimi: str, tekstitiedosto: str, otsikko: str):
    try:
        buffer = BytesIO(tekstitiedosto.encode("utf-8"))
        await k√§ytt√§j√§.send(
            content=(
                f"‚úÖ **{otsikko}**\n"
                f"Tarkista liitteen√§ oleva tiedosto.\n"
                f"Ota yhteytt√§ yll√§pitoon, jos jokin ei t√§sm√§√§."
            ),
            file=discord.File(buffer, filename=tiedostonimi)
        )
    except discord.Forbidden:
        print(f"K√§ytt√§j√§lle {k√§ytt√§j√§.id} ei voitu l√§hett√§√§ DM:√§√§.")

pending_file_sends: dict[int, dict] = {}

class VahvistaL√§hetysNappi(ui.Button):
    def __init__(self, k√§ytt√§j√§: discord.User, tekstitiedosto: str, tiedostonimi: str, otsikko: str):
        super().__init__(label="üìé Liit√§ tiedosto l√§hetett√§v√§ksi", style=discord.ButtonStyle.primary)
        self.k√§ytt√§j√§ = k√§ytt√§j√§
        self.tekstitiedosto = tekstitiedosto
        self.tiedostonimi = tiedostonimi
        self.otsikko = otsikko

    async def callback(self, interaction: discord.Interaction):
        if not any(role.name == "Mestari" for role in interaction.user.roles):
            await interaction.response.send_message("‚ùå Sinulla ei ole oikeuksia k√§ytt√§√§ t√§t√§ toimintoa.", ephemeral=True)
            return

        pending_file_sends[interaction.user.id] = {
            "kohde": self.k√§ytt√§j√§,
            "otsikko": self.otsikko,
            "timestamp": datetime.utcnow()
        }

        await interaction.response.send_message(
            "üìé Liit√§ nyt haluamasi tiedosto t√§h√§n ketjuun vastauksena tai erillisen√§ viestin√§.",
            ephemeral=True
        )

        self.disabled = True
        self.label = "‚úÖ Tiedosto pyynt√∂ l√§hetetty"
        self.style = discord.ButtonStyle.secondary
        await interaction.message.edit(view=self.view)
        await interaction.response.send_message("‚úÖ Tiedosto pyynt√∂ l√§hetetty ja ilmoitettu k√§ytt√§j√§lle.", ephemeral=True)

class VahvistaPoistoNappi(ui.Button):
    def __init__(self, k√§ytt√§j√§: discord.User, tiedostonimi: str):
        super().__init__(label="üóëÔ∏è Vahvista poisto", style=discord.ButtonStyle.danger)
        self.k√§ytt√§j√§ = k√§ytt√§j√§
        self.tiedostonimi = tiedostonimi

    async def callback(self, interaction: discord.Interaction):
        if not any(role.name == "Mestari" for role in interaction.user.roles):
            await interaction.response.send_message("‚ùå Sinulla ei ole oikeuksia k√§ytt√§√§ t√§t√§ toimintoa.", ephemeral=True)
            return

        try:
            await self.k√§ytt√§j√§.send(
                f"üóëÔ∏è Tietosi tiedostosta `{self.tiedostonimi}` on nyt poistettu pysyv√§sti.\n"
                f"Jos sinulla on kysytt√§v√§√§, ole yhteydess√§ yll√§pitoon."
            )
        except discord.Forbidden:
            await interaction.response.send_message("‚ö†Ô∏è K√§ytt√§j√§lle ei voitu l√§hett√§√§ DM:√§√§.", ephemeral=True)

        self.disabled = True
        self.label = "‚úÖ Poisto suoritettu"
        self.style = discord.ButtonStyle.secondary
        await interaction.message.edit(view=self.view)
        await interaction.response.send_message("‚úÖ Poisto vahvistettu ja ilmoitettu k√§ytt√§j√§lle.", ephemeral=True)

class Hylk√§√§Pyynt√∂Nappi(ui.Button):
    def __init__(self, k√§ytt√§j√§: discord.User, syy: str = "Ei syyt√§ annettu"):
        super().__init__(label="‚ùå Hylk√§√§ pyynt√∂", style=discord.ButtonStyle.danger)
        self.k√§ytt√§j√§ = k√§ytt√§j√§
        self.syy = syy

    async def callback(self, interaction: discord.Interaction):
        if not any(role.name == "Mestari" for role in interaction.user.roles):
            await interaction.response.send_message("‚ùå Sinulla ei ole oikeuksia k√§ytt√§√§ t√§t√§ toimintoa.", ephemeral=True)
            return

        try:
            await self.k√§ytt√§j√§.send(
                f"‚ùå Pyynt√∂si on hyl√§tty.\nSyy: {self.syy}\nJos koet t√§m√§n virheelliseksi, ota yhteytt√§ yll√§pitoon."
            )
        except discord.Forbidden:
            print(f"DM ep√§onnistui k√§ytt√§j√§lle {self.k√§ytt√§j√§.id}")

        self.disabled = True
        self.label = "‚ùå Hyl√§tty"
        self.style = discord.ButtonStyle.secondary
        await interaction.message.edit(view=self.view)
        await interaction.response.send_message("‚úÖ Pyynt√∂ hyl√§tty ja ilmoitettu k√§ytt√§j√§lle.", ephemeral=True)

async def l√§het√§_lataus_lokiviesti(kanava, pyyt√§j√§, k√§ytt√§j√§, nimi, avaimet, tekstitiedosto, tiedostonimi):
    view = ui.View()
    view.add_item(VahvistaL√§hetysNappi(k√§ytt√§j√§, tekstitiedosto, tiedostonimi, f"Latauspyynt√∂ tiedostolle `{nimi}`"))
    view.add_item(Hylk√§√§Pyynt√∂Nappi(k√§ytt√§j√§, syy="Moderaattorin harkinnan mukaan"))

    await kanava.send(
        content=(
            f"üì• **Latauspyynt√∂** `{nimi}`\n"
            f"üë§ Kohdek√§ytt√§j√§: {k√§ytt√§j√§.mention}\n"
            f"üì® Pyyt√§j√§: {pyyt√§j√§.mention}\n"
            f"üîë Avaimet: {', '.join(avaimet)}\n"
            f"‚ö†Ô∏è Vahvista ennen kuin tiedosto l√§hetet√§√§n j√§senelle."
        ),
        view=view
    )

async def l√§het√§_poisto_lokiviesti(kanava, poistaja, k√§ytt√§j√§, nimi, avaimet):
    view = ui.View()
    view.add_item(VahvistaPoistoNappi(k√§ytt√§j√§, nimi))
    view.add_item(Hylk√§√§Pyynt√∂Nappi(k√§ytt√§j√§, syy="Moderaattorin harkinnan mukaan"))

    await kanava.send(
        content=(
            f"üóëÔ∏è **Poistopyynt√∂** `{nimi}`\n"
            f"üë§ Kohdek√§ytt√§j√§: {k√§ytt√§j√§.mention}\n"
            f"üëÆ Poistaja: {poistaja.mention}\n"
            f"üîë Avaimet: {', '.join(avaimet)}\n"
            f"‚ö†Ô∏è Vahvista ennen kuin poistoilmoitus l√§hetet√§√§n j√§senelle."
        ),
        view=view
    )