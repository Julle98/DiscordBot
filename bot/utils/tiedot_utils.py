import discord
import os
import json
from io import BytesIO
from datetime import datetime, timedelta
from discord import Interaction
import zipfile
from pathlib import Path
from discord import ui
from dotenv import load_dotenv
from collections import Counter
from bot.utils.bot_setup import bot
from datetime import datetime
import re

load_dotenv()

JSON_DIR = Path(os.getenv("JSON_DIR"))
JSON_DIRS = Path(os.getenv("JSON_DIRS"))
XP_JSON_PATH = Path(os.getenv("XP_JSON_PATH"))
MOD_LOG_CHANNEL_ID = int(os.getenv("MOD_LOG_CHANNEL_ID", 0))
MODLOG_CHANNEL_ID = (int(os.getenv("MODLOG_CHANNEL_ID", 0)))
SLOWMODE_CHANNEL_ID = (int(os.getenv("SLOWMODE_CHANNEL_ID", 0)))
LOG_CHANNEL_ID = (int(os.getenv("LOG_CHANNEL_ID", 0)))
BACKUP_JSON_PATH = Path(os.getenv("BACKUP_JSON_PATH", "backup"))

TIEDOSTOT = {
    "Teht√§v√§t": JSON_DIR / "tasks.json",
    "Ostokset": JSON_DIRS / "ostot.json",
    "Streakit": JSON_DIR / "streaks.json",
    "Tarjous": JSON_DIRS / "tarjous.json",
    "XP-data": XP_JSON_PATH / "users_xp.json",
    "Puhe-streak": XP_JSON_PATH / "users_streak.json",
}

KATEGORIAT = list(TIEDOSTOT.keys()) + ["Moderointi", "Toiminta", "Komennot",]

def varmuuskopioi_json_tiedostot():
    BACKUP_JSON_PATH.mkdir(parents=True, exist_ok=True)
    for nimi, polku in TIEDOSTOT.items():
        if polku.exists():
            backup_polku = BACKUP_JSON_PATH / f"{nimi}_backup.json"
            try:
                with open(polku, "r", encoding="utf-8") as src, open(backup_polku, "w", encoding="utf-8") as dst:
                    dst.write(src.read())
            except Exception as e:
                print(f"Varmuuskopiointivirhe tiedostolle {nimi}:", e)

def j√§senn√§_teht√§v√§viesti(viesti):
    try:
        sis√§lt√∂ = json.loads(viesti["content"])
        teht√§v√§ = sis√§lt√∂.get("task", "")
        aikaleima = sis√§lt√∂.get("timestamp", "")
        return {
            "task": teht√§v√§,
            "timestamp": aikaleima
        }
    except Exception as e:
        print(f"Viestin j√§sennys ep√§onnistui: {e}")
        return None

def j√§senn√§_teht√§v√§tekstist√§(teksti):
    m = re.search(r"suoritti .* teht√§v√§n (?P<teht√§v√§>.+?) ja sai \+(\d+) XP", teksti)
    if m:
        teht√§v√§ = m.group("teht√§v√§")
        xp = int(m.group(2))
        aikaleima = datetime.now().isoformat()  
        return {
            "task": teht√§v√§,
            "xp": xp,
            "timestamp": aikaleima
        }
    return None

def laske_teht√§v√§_xp_viesteist√§(viestit):
    yhteens√§_xp = 0
    teht√§v√§lista = []

    for viesti in viestit:
        teht√§v√§ = j√§senn√§_teht√§v√§tekstist√§(viesti["content"])
        if teht√§v√§:
            yhteens√§_xp += teht√§v√§["xp"]
            teht√§v√§lista.append(teht√§v√§)

    return yhteens√§_xp, teht√§v√§lista

def hae_kokonais_xp(uid):
    try:
        with open(TIEDOSTOT["XP-data"], encoding="utf-8") as f:
            data = json.load(f)
        return data.get(uid, {}).get("xp", 0)
    except Exception as e:
        print(f"Virhe XP-datan haussa: {e}")
        return 0

async def hae_teht√§vien_m√§√§r√§(user_id: str):
    channel = bot.get_channel(int(os.getenv("TASK_DATA_CHANNEL_ID")))
    if not channel:
        return 0
    count = 0
    async for msg in channel.history(limit=1000):
        try:
            data = json.loads(msg.content)
            if data.get("type") == "user_task" and str(data.get("user_id")) == user_id:
                count += 1
        except:
            continue
    return count

async def hae_teht√§v√§viestit(user_id: str):
    kanava = bot.get_channel(int(os.getenv("TASK_DATA_CHANNEL_ID")))
    teht√§v√§t = []
    async for msg in kanava.history(limit=500):
        try:
            data = json.loads(msg.content)
            if data.get("type") == "user_task" and str(data.get("user_id")) == user_id:
                teht√§v√§t.append(data)
        except:
            continue
    return teht√§v√§t

async def hae_tarjousviestit(user_id: str):
    kanava = bot.get_channel(int(os.getenv("OSTOSLOKI_KANAVA_ID")))
    viestit = []
    async for msg in kanava.history(limit=500):
        if f"<@{user_id}>" in msg.content and "Tarjous!" in msg.content:
            viestit.append(msg)
    return viestit

async def hae_ostosm√§√§r√§(user_id: str):
    channel = bot.get_channel(int(os.getenv("OSTOSLOKI_KANAVA_ID")))
    if not channel:
        return 0
    count = 0
    async for msg in channel.history(limit=500):
        if f"<@{user_id}>" in msg.content:
            count += 1
    return count

async def hae_ostosviestit(user_id: str):
    kanava = bot.get_channel(int(os.getenv("OSTOSLOKI_KANAVA_ID")))
    viestit = []

    if not kanava:
        return []

    async for msg in kanava.history(limit=500):
        if f"<@{user_id}>" in msg.content and "osti tuotteen" in msg.content:
            viestit.append(msg)

    return viestit

async def hae_k√§ytt√§j√§n_komennot(user_id: int):
    log_channel = bot.get_channel(int(os.getenv("LOG_CHANNEL_ID")))
    laskuri = Counter()
    yhteens√§ = 0

    if not log_channel:
        return 0, {}

    async for msg in log_channel.history(limit=1000):
        if f"({user_id})" in msg.content:
            match = re.search(r"Komento:\s*/?([^\n]+)", msg.content)
            if match:
                komento = match.group(1).lstrip("/")
                laskuri[komento] += 1
                yhteens√§ += 1

    return yhteens√§, laskuri

async def hae_k√§ytt√§j√§n_komennot_lista(user_id: int):
    log_channel = bot.get_channel(int(os.getenv("LOG_CHANNEL_ID")))
    laskuri = Counter()

    if not log_channel:
        return {}

    async for msg in log_channel.history(limit=1000):
        if f"({user_id})" in msg.content:
            match = re.search(r"Komento:\s*/?([^\n]+)", msg.content)
            if match:
                komento = match.group(1).lstrip("/")
                laskuri[komento] += 1
    return laskuri

async def hae_viimeisin_aktiivisuusviesti(user_id: str):
    kanavat = [
        bot.get_channel(int(os.getenv("TASK_DATA_CHANNEL_ID"))),
        bot.get_channel(int(os.getenv("OSTOSLOKI_KANAVA_ID"))),
        bot.get_channel(SLOWMODE_CHANNEL_ID)
    ]
    viimeisin = None

    for kanava in kanavat:
        if not kanava:
            continue
        async for msg in kanava.history(limit=500):
            if f"{user_id}" in msg.content or f"<@{user_id}>" in msg.content:
                if not viimeisin or msg.created_at > viimeisin:
                    viimeisin = msg.created_at

    return viimeisin

class J√§senToimintaAnalyysi:
    def __init__(self, j√§sen: discord.Member):
        self.j√§sen = j√§sen
        self.kanavam√§√§r√§t = {}

    async def analysoi(self, guild: discord.Guild, limit=1000):
        self.kanavam√§√§r√§t.clear()
        kanavat = [c for c in guild.text_channels if c.permissions_for(self.j√§sen).read_messages]

        for kanava in kanavat:
            try:
                count = 0
                async for msg in kanava.history(limit=limit):
                    if msg.author == self.j√§sen:
                        count += 1
                if count > 0:
                    self.kanavam√§√§r√§t[kanava] = count
            except discord.Forbidden:
                continue

    def aktiivisin(self):
        if not self.kanavam√§√§r√§t:
            return None, 0
        kanava = max(self.kanavam√§√§r√§t, key=self.kanavam√§√§r√§t.get)
        return kanava, self.kanavam√§√§r√§t[kanava]

async def muodosta_kategoria_embed(kategoria: str, user: discord.User, bot, interaction: discord.Interaction) -> discord.Embed:
    uid = str(user.id)
    embed = discord.Embed(
        title=f"üì¶ Kategoria: {kategoria}",
        description=f"Tiedot k√§ytt√§j√§lt√§: {user.display_name}",
        color=discord.Color.blurple()
    )

    user_data = None
    historia = []

    if kategoria in TIEDOSTOT:
        path = TIEDOSTOT[kategoria]
        try:
            with open(path, encoding="utf-8") as f:
                data = json.load(f)
                user_data = data.get(uid)
        except Exception as e:
            embed.add_field(name="‚ö†Ô∏è Virhe", value=f"Tietojen lataus ep√§onnistui: {e}", inline=False)

        if kategoria == "Teht√§v√§t":
            teht√§v√§viestit = await hae_teht√§v√§viestit(uid)
            m√§√§r√§ = len(teht√§v√§viestit)

            try:
                with open(TIEDOSTOT.get("Streakit"), encoding="utf-8") as f:
                    streaks = json.load(f)

                daily = streaks.get(uid, {}).get("daily", {})
                weekly = streaks.get(uid, {}).get("weekly", {})
                monthly = streaks.get(uid, {}).get("monthly", {})

                daily_streak = daily.get("streak", 0)
                weekly_streak = weekly.get("streak", 0)
                monthly_streak = monthly.get("streak", 0)

                if monthly_streak >= 1:
                    xp_per_task = 150
                elif weekly_streak >= 1:
                    xp_per_task = 100
                elif daily_streak >= 1:
                    xp_per_task = 50
                else:
                    xp_per_task = 50

                total_xp = m√§√§r√§ * xp_per_task

                embed.add_field(name="üìä Teht√§vien m√§√§r√§", value=f"{m√§√§r√§} kpl", inline=True)
                embed.add_field(name="‚ú® XP yhteens√§", value=f"{total_xp} XP", inline=True)
                embed.add_field(name="üî• XP / teht√§v√§", value=f"{xp_per_task} XP", inline=True)

                embed.add_field(
                    name="üìÖ P√§ivitt√§inen streak",
                    value=f"{daily_streak} p√§iv√§√§",
                    inline=False
                )
                embed.add_field(
                    name="üìÜ Viikoittainen streak",
                    value=f"{weekly_streak} viikkoa",
                    inline=False
                )
                embed.add_field(
                    name="üóìÔ∏è Kuukausittainen streak",
                    value=f"{monthly_streak} kuukautta",
                    inline=False
                )
            except Exception as e:
                embed.add_field(name="‚ö†Ô∏è Virhe", value=f"Streak/XP-datan lataus ep√§onnistui: {e}", inline=False)

            embed.add_field(name="üìÑ Viimeisimm√§t teht√§v√§t", value="Alla n√§kyy 5 viimeisint√§ suoritettua teht√§v√§√§:", inline=False)
            for i, teht√§v√§ in enumerate(teht√§v√§viestit[:5]):
                kuvaus = teht√§v√§.get("task", "Tuntematon teht√§v√§")
                aikaleima = teht√§v√§.get("timestamp")
                try:
                    aika = datetime.fromisoformat(aikaleima).strftime("%d.%m.%Y %H:%M") if aikaleima else "?"
                except:
                    aika = "?"
                embed.add_field(name=f"üìò Teht√§v√§ {i+1}", value=f"{kuvaus}\nüïí {aika}", inline=False)

        elif kategoria == "Streakit":
            try:
                with open(TIEDOSTOT["Streakit"], encoding="utf-8") as f:
                    streak_data = json.load(f)
                data = streak_data.get(uid, {})
                embed.add_field(name="üìÖ P√§ivitt√§inen streak", value=f'{data.get("daily", {}).get("streak", 0)} p√§iv√§√§', inline=False)
                embed.add_field(name="üìÜ Viikoittainen streak", value=f'{data.get("weekly", {}).get("streak", 0)} viikkoa', inline=False)
                embed.add_field(name="üóìÔ∏è Kuukausittainen streak", value=f'{data.get("monthly", {}).get("streak", 0)} kuukautta', inline=False)
            except Exception as e:
                embed.add_field(name="‚ö†Ô∏è Virhe", value=f"Streak-datan lataus ep√§onnistui: {e}", inline=False)

        elif kategoria == "Komennot":
            await interaction.response.defer(ephemeral=True)

            odotus_embed = discord.Embed(
                title="‚è≥ Ladataan...",
                description="Haetaan tietoja, t√§m√§ vain kest√§√§ hetken...",
                color=discord.Color.orange()
            )
            await interaction.followup.send(embed=odotus_embed, ephemeral=True)

            embed = discord.Embed(title="üìä Komentostatistiikka", color=discord.Color.blue())

            try:
                yhteens√§, komentolista = await hae_k√§ytt√§j√§n_komennot(user.id)
                embed.add_field(name="üí¨ Komentoja k√§ytetty", value=f"{yhteens√§} kertaa", inline=True)

                if yhteens√§ > 0:
                    top_komennot = komentolista.most_common(5)
                    rivit = [f"- `{nimi}` ({m√§√§r√§}√ó)" for nimi, m√§√§r√§ in top_komennot]
                    embed.add_field(
                        name="üìö Eniten k√§ytetyt komennot (globaalisti)",
                        value="\n".join(rivit),
                        inline=False
                    )
                else:
                    embed.add_field(
                        name="üìö Eniten k√§ytetyt komennot (globaalisti)",
                        value="Ei komentoja havaittu.",
                        inline=False
                    )

                log_channel_id = int(os.getenv("LOG_CHANNEL_ID"))
                log_channel = bot.get_channel(log_channel_id)
                laskuri = Counter()

                if log_channel:
                    async for msg in log_channel.history(limit=1000):
                        if f"({user.id})" in msg.content:
                            if (match := re.search(r"Komento: `(.+?)`", msg.content)):
                                komento = match.group(1)
                                laskuri[komento] += 1

                    if laskuri:
                        rivit = [f"- `{komento}` ({m√§√§r√§}√ó)" for komento, m√§√§r√§ in laskuri.most_common(5)]
                        embed.add_field(
                            name="üìå Omat k√§ytetyimm√§t komennot",
                            value="\n".join(rivit),
                            inline=False
                        )
                        oma_yht = sum(laskuri.values())
                        embed.set_footer(text=f"Olet k√§ytt√§nyt {oma_yht} komentoa.")
                    else:
                        embed.add_field(
                            name="üìå Omat k√§ytetyimm√§t komennot",
                            value="Et ole k√§ytt√§nyt viel√§ komentoja.",
                            inline=False
                        )
                else:
                    embed.add_field(
                        name="üìå Omat k√§ytetyimm√§t komennot",
                        value="Lokikanavaa ei l√∂ytynyt.",
                        inline=False
                    )

            except Exception as e:
                embed.add_field(
                    name="‚ö†Ô∏è Virhe",
                    value=f"Komentodatan lataus ep√§onnistui: {e}",
                    inline=False
                )

            await interaction.followup.send(embed=embed, ephemeral=True)

            valmis_embed = discord.Embed(
                title="‚úÖ Lataus valmis",
                description="Voit sulkea t√§m√§n viestin.",
                color=discord.Color.green()
            )
            await interaction.followup.send(embed=valmis_embed, ephemeral=True)

        elif kategoria == "Ostokset":
            try:
                ostosviestit = await hae_ostosviestit(str(user.id))
                if ostosviestit:
                    embed.add_field(
                        name="üõí Ostoksia tehty",
                        value=f"{len(ostosviestit)} kpl",
                        inline=True
                    )

                    yhteens√§_xp = 0  

                    for viesti in ostosviestit[:5]:
                        pvm = viesti.created_at.strftime("%d.%m.%Y %H:%M")
                        match = re.search(r"osti tuotteen (.+?) \((\d+) XP\)", viesti.content)
                        tuote = match.group(1) if match else "Tuntematon tuote"
                        hinta = int(match.group(2)) if match else 0
                        yhteens√§_xp += hinta
                        embed.add_field(
                            name=f"üßæ {tuote}",
                            value=f"üí∞ {hinta} XP\nüóìÔ∏è {pvm}",
                            inline=False
                        )

                    embed.add_field(
                        name="üßÆ XP-k√§ytt√∂ yhteens√§",
                        value=f"{yhteens√§_xp} XP (vain 5 viimeisint√§ ostosta huomioitu)",
                        inline=False
                    )
                else:
                    embed.add_field(name="üõí Ostokset", value="Ei ostoksia kirjattuna.", inline=False)
            except Exception as e:
                embed.add_field(name="‚ö†Ô∏è Virhe", value=f"Ostosviestien k√§sittely ep√§onnistui: {e}", inline=False)

        elif kategoria == "Tarjous":
            tarjousviestit = await hae_tarjousviestit(uid)
            if tarjousviestit:
                for viesti in tarjousviestit[:5]:
                    aika = viesti.created_at.strftime("%d.%m.%Y %H:%M")    
                    teksti = re.sub(r" ?\([^)]*\)", "", viesti.content).strip()
                    embed.add_field(name="üéÅ Tarjous", value=f"{teksti}\nüóìÔ∏è {aika}", inline=False)
            else:
                embed.add_field(name="üéÅ Tarjous", value="Ei l√∂ydettyj√§ tarjousviestej√§.", inline=False)

        elif kategoria == "Puhe-streak":
            try:
                with open(TIEDOSTOT["Puhe-streak"], encoding="utf-8") as f:
                    data = json.load(f)

                puhedata = data.get(str(user.id))

                if puhedata:
                    streak = puhedata.get("streak", 0)
                    pvm_str = puhedata.get("pvm")

                    try:
                        viimeisin_pvm = datetime.strptime(pvm_str, "%Y-%m-%d")
                        alku = viimeisin_pvm - timedelta(days=streak - 1)
                    except Exception:
                        viimeisin_pvm = datetime.today()
                        alku = viimeisin_pvm - timedelta(days=streak - 1)

                    alku_str = alku.strftime("%d.%m.%Y")
                    viimeisin_str = viimeisin_pvm.strftime("%d.%m.%Y")

                    embed.add_field(
                        name="üé§ Puhe-streak",
                        value=(
                            f"üî• {streak} p√§iv√§√§\n"
                            f"üìÖ Alkoi: {alku_str}\n"
                            f"üìÖ Viimeisin p√§iv√§: {viimeisin_str}\n"
                            f"üÜî ID: `{user.id}`"
                        ),
                        inline=False
                    )
                else:
                    embed.add_field(
                        name="üé§ Puhe-streak",
                        value="Ei puheaktiivisuutta tallennettuna.",
                        inline=False
                    )
            except Exception as e:
                embed.add_field(
                    name="‚ö†Ô∏è Virhe",
                    value=f"Puhe-streakin lataus ep√§onnistui: {e}",
                    inline=False
                )

        elif kategoria == "XP-data":
            kokonais_xp = hae_kokonais_xp(uid)

            viestit = await hae_teht√§v√§viestit(uid)  
            teht√§v√§_xp, teht√§v√§lista = laske_teht√§v√§_xp_viesteist√§(viestit)

            arvio_viesti_xp = max(0, kokonais_xp - teht√§v√§_xp)

            teht√§v√§_prosentti = (teht√§v√§_xp / kokonais_xp) * 100 if kokonais_xp > 0 else 0
            viesti_prosentti = (arvio_viesti_xp / kokonais_xp) * 100 if kokonais_xp > 0 else 0

            embed = discord.Embed(
                title="üî¢ XP-raportti",
                description=f"K√§ytt√§j√§n {uid} XP-erittely",
                color=discord.Color.blue()
            )

            embed.add_field(name="üß© XP-erittely", value=(
                f"üìò Teht√§vist√§: {teht√§v√§_xp} XP\n"
                f"üîç Arvio viestipohjaisesta XP:st√§: {arvio_viesti_xp} XP\n"
                f"‚ú® Yhteens√§: {kokonais_xp} XP"
            ), inline=False)

            embed.add_field(name="üìà XP-jakauma (%)", value=(
                f"üìò Teht√§v√§t: {teht√§v√§_prosentti:.1f}%\n"
                f"üîé Viestit: {viesti_prosentti:.1f}%"
            ), inline=False)

    elif kategoria == "Moderointi":
        varoituskanava = bot.get_channel(MODLOG_CHANNEL_ID)
        mutekanava = bot.get_channel(MODLOG_CHANNEL_ID)
        helpkanava = bot.get_channel(int(os.getenv("HELP_CHANNEL_ID")))
        
        varoitukset = []
        mute_tiedot = []
        helppyynto = []

        async for msg in varoituskanava.history(limit=1000):
            if f"ID: {user.id}" in msg.content:
                sis√§lt√∂ = msg.content
                syy = sis√§lt√∂.split("Syy: ")[-1].split(" |")[0]
                antaja = sis√§lt√∂.split("Antaja: ")[-1].split("\n")[0]
                aika = msg.created_at.strftime("%d.%m.%Y %H:%M")

                varoitukset.append({
                    "syy": syy,
                    "antaja": antaja,
                    "aika": aika
                })

        if mutekanava:
            async for msg in mutekanava.history(limit=1000):
                if f"{user.mention}" in msg.content and "üîá J√§√§hy asetettu" in msg.content:
                    sis√§lt√∂ = msg.content
                    rivit = sis√§lt√∂.split("\n")

                    kesto = next((r.split(": ", 1)[-1] for r in rivit if "‚è± Kesto:" in r), "Tuntematon")
                    syy = next((r.split(": ", 1)[-1] for r in rivit if "üìù Syy:" in r), "Tuntematon")
                    asettaja = next((r.split(": ", 1)[-1] for r in rivit if "üëÆ Asetti:" in r), "Tuntematon")
                    aika = msg.created_at.strftime("%d.%m.%Y %H:%M")

                    mute_tiedot.append({
                        "kesto": kesto,
                        "syy": syy,
                        "asettaja": asettaja,
                        "aika": aika
                    })

        if helpkanava:
            async for msg in helpkanava.history(limit=500):
                if msg.content.startswith("‚úÖ Uusi pyynt√∂ /help-komennolla") and msg.author.id == user.id:
                    helppyynto.append(msg)

        if varoitukset:
            embed.add_field(name="‚ö†Ô∏è Varoitukset", value=f"{len(varoitukset)} kpl", inline=False)
            for i, data in enumerate(varoitukset[:2]):
                embed.add_field(
                    name=f"‚ö†Ô∏è Varoitus {i+1}",
                    value=f"üìù Syy: {data['syy']}\nüëÆ Antaja: {data['antaja']}\nüïí {data['aika']}",
                    inline=False
                )
        else:
            embed.add_field(name="‚úÖ Ei varoituksia", value="K√§ytt√§j√§ll√§ ei ole merkint√∂j√§.", inline=False)

        if mute_tiedot:
            embed.add_field(name="üîá J√§√§hyt (mute)", value=f"{len(mute_tiedot)} kertaa", inline=False)
            for i, tiedot in enumerate(mute_tiedot[:2]):
                embed.add_field(
                    name=f"üîí J√§√§hy {i+1}",
                    value=f"üïí {tiedot['aika']}\nüïì Kesto: {tiedot['kesto']}\nüìù Syy: {tiedot['syy']}\nüëÆ Asetti: {tiedot['asettaja']}",
                    inline=False
                )
        else:
            embed.add_field(name="‚úÖ Ei j√§√§hyj√§", value="K√§ytt√§j√§ll√§ ei ole j√§√§hymerkint√∂j√§.", inline=False)

        if helppyynto:
            embed.add_field(name="üÜò Help-pyynn√∂t", value=f"Pyynt√∂j√§: {len(helppyynto)}", inline=False)
            for viesti in helppyynto[:2]:
                otsikko = viesti.content.split("\n")[1] if "\n" in viesti.content else "üíÅ Help-pyynt√∂"
                kuvaus = "\n".join(viesti.content.split("\n")[2:])
                aika = viesti.created_at.strftime("%d.%m.%Y %H:%M")
                tila = "‚úÖ Suljettu" if "‚Ä¢ Suljettu" in viesti.content else "üïì Avoin"
                embed.add_field(
                    name="üì• Pyynt√∂",
                    value=f"**{otsikko}**\n{kuvaus}\nüïí {aika}\nüìå Tila: {tila}",
                    inline=False
                )
        else:
            embed.add_field(name="‚úÖ Ei help-pyynt√∂j√§", value="K√§ytt√§j√§lt√§ ei l√∂ytynyt pyynt√∂j√§.", inline=False)

    elif kategoria == "Toiminta":
        await interaction.response.defer(ephemeral=True)

        odotus_embed = discord.Embed(
            title="‚è≥ Ladataan...",
            description="Haetaan tietoja, t√§m√§ vain kest√§√§ hetken...",
            color=discord.Color.orange()
        )

        await interaction.followup.send(embed=odotus_embed, ephemeral=True)

        try:
            analyysi = J√§senToimintaAnalyysi(user)
            guild = interaction.guild
            if not guild:
                embed.add_field(name="‚ö†Ô∏è Virhe", value="Guild-objektia ei voitu saada.", inline=False)
            else:
                await analyysi.analysoi(guild=guild, limit=1000)

                embed = discord.Embed(
                    title="üìà Toiminta-analyysi",
                    description="T√§ss√§ tulokset j√§senen aktiivisuudesta.",
                    color=discord.Color.blue()
                )

                aktiivisin, m√§√§r√§ = analyysi.aktiivisin()
                if aktiivisin:
                    embed.add_field(
                        name="üí¨ Aktiivisin kanava",
                        value=f"{aktiivisin.mention} ({m√§√§r√§} viesti√§)",
                        inline=False
                    )
                else:
                    embed.add_field(
                        name="üí¨ Aktiivisin kanava",
                        value="Ei l√§hetettyj√§ viestej√§ viimeaikaisesti.",
                        inline=False
                    )
                embed.add_field(
                    name="üìä Analysoitu viestim√§√§r√§",
                    value=f"{sum(analyysi.kanavam√§√§r√§t.values())} viesti√§",
                    inline=False
                )

                await interaction.followup.send(embed=embed, ephemeral=True)
                
                valmis_embed = discord.Embed(
                    title="Lataus tehty! ‚úÖ",
                    description="Voit sulkea t√§m√§n viestin.",
                    color=discord.Color.green()
                )
                await interaction.followup.send(embed=valmis_embed, ephemeral=True)
        except Exception as e: embed.add_field(name="‚ö†Ô∏è Virhe", value=f"Aktiivisuusdatan lataus ep√§onnistui: {e}", inline=False)

    else:
        embed.add_field(name="‚ùì Tuntematon kategoria", value="Ei sis√§lt√∂√§ saatavilla.", inline=False)

    embed.set_footer(text="üìÅ Tiedot p√§ivittyv√§t reaaliaikaisesti")
    return embed

class DataValintaView(ui.View):
    def __init__(self, user):
        super().__init__(timeout=None)
        self.user = user
        for nimi in KATEGORIAT:
            self.add_item(KategoriaNappi(nimi, user=self.user))

    async def interaction_check(self, interaction):
        return interaction.user.id == self.user.id

async def k√§sittele_valinta(user: discord.User, valinta: str, interaction: discord.Interaction):
    await interaction.response.defer(ephemeral=True)

    odotus_embed = discord.Embed(
        title="‚è≥ Ladataan...",
        description=f"Haetaan tietoja kategoriasta: **{valinta}**...",
        color=discord.Color.orange()
    )

    msg = await interaction.followup.send(embed=odotus_embed, ephemeral=True)

    try:
        embed = await muodosta_kategoria_embed(valinta, user, bot, interaction)

        await msg.edit(
            content=f"üìÅ Kategoria: {valinta}",
            embed=embed,
            view=KategoriaView(user, valinta)
        )
    except Exception as e:
        print(f"k√§sittele_valinta virhe: {e}")
        await msg.edit(content="‚ùå Virhe tiedonhaussa.", embed=None)

class KategoriaNappi(ui.Button):
    def __init__(self, nimi, user):
        super().__init__(label=nimi, style=discord.ButtonStyle.primary)
        self.nimi = nimi
        self.user = user
        self.bot = bot

    async def callback(self, interaction):
        try:
            embed = await muodosta_kategoria_embed(self.nimi, self.user, self.bot, interaction)
            await interaction.response.edit_message(
                content=f"üìÅ Kategoria: {self.nimi}",
                embed=embed,
                view=KategoriaView(self.user, self.nimi)
            )
        except Exception as e:
            print(f"Embedin luonti ep√§onnistui: {e}")
            await interaction.response.send_message("‚ùå Virhe n√§kym√§n avaamisessa.", ephemeral=True)

AVAIMET_KATEGORIALLE = {
    "XP-data": ["xp", "level"],
    "XP-streakit": ["streak", "pvm"],
    "Streakit": ["streak"],
    "Puhe-streak": ["streak", "pvm"],  
}

class KategoriaView(ui.View):
    def __init__(self, user, valittu=None):
        super().__init__(timeout=None)
        self.user = user
        self.kategoria = valittu

        if not valittu:
            for nimi in KATEGORIAT:
                self.add_item(KategoriaNappi(nimi, user))
        else:
            self.add_item(PalaaNappi(user))
            self.add_item(LataaNappi(valittu, user, AVAIMET_KATEGORIALLE.get(valittu, [])))
            self.add_item(PoistaNappi(valittu, user, AVAIMET_KATEGORIALLE.get(valittu, [])))

    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        return interaction.user.id == self.user.id

class KatsoNappi(ui.Button):
    def __init__(self, user):
        super().__init__(label="Katso tiedot", style=discord.ButtonStyle.secondary)
        self.user = user

    async def callback(self, interaction):
        try:
            await interaction.response.edit_message(
                content="üìÅ Valitse kategoria, jonka tiedot haluat n√§hd√§:",
                embed=None,
                view=KategoriaView(self.user, None)
            )
        except discord.NotFound:
            print("‚ö†Ô∏è Interaktio vanhentunut ‚Äî k√§ytet√§√§n followup.send")
            await interaction.followup.send(
                content="üìÅ Valitse kategoria, jonka tiedot haluat n√§hd√§:",
                embed=None,
                view=KategoriaView(self.user, None),
                ephemeral=True
            )
        except Exception as e:
            print(f"KatsoNappi virhe: {e}")
            await interaction.response.send_message("‚ùå Virhe n√§kym√§n avaamisessa.", ephemeral=True)

class PalaaNappi(ui.Button):
    def __init__(self, user, nimi="P√§√§valinta"):
        super().__init__(label="üîô Palaa alkuun", style=discord.ButtonStyle.secondary)
        self.user = user
        self.nimi = nimi

    async def callback(self, interaction):
        try:
            await interaction.response.edit_message(
                content="üìÅ Valitse kategoria, jonka tiedot haluat n√§hd√§:",
                embed=None,
                view=KategoriaView(self.user, None)
            )
        except discord.NotFound:
            print("‚ö†Ô∏è Interaktio vanhentunut ‚Äî k√§ytet√§√§n followup.send")
            await interaction.followup.send(
                content="üìÅ Valitse kategoria, jonka tiedot haluat n√§hd√§:",
                embed=None,
                view=KategoriaView(self.user, None),
                ephemeral=True
            )
        except Exception as e:
            print(f"PalaaNappi virhe: {e}")
            await interaction.response.send_message("‚ùå Virhe n√§kym√§n avaamisessa.", ephemeral=True)

class LataaNappi(ui.Button):
    def __init__(self, nimi, user, avaimet: list[str] = None):
        super().__init__(label="Lataa tiedosto", style=discord.ButtonStyle.success)
        self.nimi = nimi
        self.user = user
        self.avaimet = avaimet or []  

    async def callback(self, interaction):
        varmuuskopioi_json_tiedostot()
        path = TIEDOSTOT.get(self.nimi)
        if not path or not path.exists():
            await interaction.response.send_message("‚ùå Tiedostoa ei l√∂ytynyt.", ephemeral=True)
            return
        try:
            with open(path, encoding="utf-8") as f:
                data = json.load(f)
            alkuper√§inen = data.get(str(self.user.id))
            if not alkuper√§inen:
                await interaction.response.send_message("‚ÑπÔ∏è Sinulla ei ole dataa t√§ss√§ tiedostossa.", ephemeral=True)
                return

            suodatettu = {key: alkuper√§inen[key] for key in self.avaimet if key in alkuper√§inen}

            if not suodatettu:
                await interaction.response.send_message("‚ÑπÔ∏è Ei ladattavaa dataa valituilla avaimilla.", ephemeral=True)
                return

            buffer = BytesIO()
            json.dump({str(self.user.id): suodatettu}, buffer, ensure_ascii=False, indent=2)
            buffer.seek(0)
            await interaction.response.send_message(
                file=discord.File(buffer, filename=f"{self.nimi}_{self.user.id}.txt"),
                ephemeral=True
            )
        except Exception as e:
            await interaction.response.send_message("‚ö†Ô∏è Lataus ep√§onnistui.", ephemeral=True)

class PoistaNappi(ui.Button):
    def __init__(self, nimi, user, avaimet: list[str] = None):
        super().__init__(label="Poista tiedot", style=discord.ButtonStyle.danger)
        self.nimi = nimi
        self.user = user
        self.avaimet = avaimet or []

    async def callback(self, interaction):
        await interaction.response.send_modal(
            PoistovarmistusModal(self.nimi, [TIEDOSTOT[self.nimi]], self.user, self.avaimet)
        )

class IlmoitaVirheNappi(ui.Button):
    def __init__(self, user):
        super().__init__(label="Ilmoita virheest√§", style=discord.ButtonStyle.danger)
        self.user = user

    async def callback(self, interaction):
        modlog = bot.get_channel(MOD_LOG_CHANNEL_ID)
        if modlog:
            await modlog.send(
                f"üö® *Varoitusvirhe-ilmoitus*\nKohde: {self.user.mention} ({self.user.id})\nIlmoittaja: {interaction.user.mention} ({interaction.user.id})\nAika: <t:{int(discord.utils.utcnow().timestamp())}:F>"
            )
        await interaction.response.send_message("‚úÖ Ilmoitus l√§hetetty moderaattoreille.", ephemeral=True)

class PoistovarmistusModal(ui.Modal, title="Vahvista tietojen poisto"):
    vahvistus = ui.TextInput(label="Kirjoita VAHVISTA poistaaksesi", placeholder="vahvista", required=True)

    def __init__(self, nimi: str, polut: list[Path], user: discord.User, avaimet: list[str] = None):
        super().__init__()
        self.nimi = nimi
        self.polut = polut
        self.user = user
        self.avaimet = avaimet or []

    async def on_submit(self, interaction: discord.Interaction):
        if self.vahvistus.value.lower() != "vahvista":
            await interaction.response.send_message("‚ùå Vahvistus ep√§onnistui. Tietoja ei poistettu.", ephemeral=True)
            return

        tiedot_poistettu = False
        koko_poisto = False

        for polku in self.polut:
            try:
                if polku.exists():
                    with open(polku, "r+", encoding="utf-8") as f:
                        data = json.load(f)
                        uid = str(self.user.id)
                        if uid in data:
                            if self.avaimet:
                                for avain in self.avaimet:
                                    if avain in data[uid]:
                                        del data[uid][avain]
                                        tiedot_poistettu = True
                                if not data[uid]:  
                                    del data[uid]
                                    koko_poisto = True
                            else:
                                del data[uid]
                                koko_poisto = True
                                tiedot_poistettu = True

                            f.seek(0)
                            json.dump(data, f, indent=2, ensure_ascii=False)
                            f.truncate()
            except Exception as e:
                print("Poistovirhe:", e)

        if tiedot_poistettu:
            viesti = (
                f"üóëÔ∏è Poistettiin {'kaikki' if koko_poisto else 'valitut'} tiedot kohteesta **{self.nimi}**."
            )
        else:
            viesti = f"‚ÑπÔ∏è Ei l√∂ytynyt poistettavaa dataa kohteesta **{self.nimi}**."

        await interaction.response.send_message(viesti, ephemeral=True)
        await logita_poisto(interaction.user, self.nimi, self.user)

async def logita_poisto(poistaja: discord.User, kohde: str, k√§ytt√§j√§: discord.User):
    kanava = bot.get_channel(MOD_LOG_CHANNEL_ID)
    if kanava:
        await kanava.send(
            f"üóëÔ∏è **Poisto:** {kohde}\n"
            f"üë§ Kohdek√§ytt√§j√§: {k√§ytt√§j√§.mention} ({k√§ytt√§j√§.id})\n"
            f"üëÆ Poistaja: {poistaja.mention} ({poistaja.id})\n"
            f"üïí Aika: <t:{int(discord.utils.utcnow().timestamp())}:F>"
        )