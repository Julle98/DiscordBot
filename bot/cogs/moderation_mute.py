import discord
from discord import app_commands
from discord.ext import commands
from datetime import timedelta
from bot.utils.logger import kirjaa_ga_event, kirjaa_komento_lokiin
from dotenv import load_dotenv
import os
from bot.utils.error_handler import CommandErrorHandler

load_dotenv()
MODLOG_CHANNEL_ID = int(os.getenv("MODLOG_CHANNEL_ID", 0))

class Moderation_mute(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    # MUTE
    @app_commands.command(name="mute", description="Aseta j√§√§hy j√§senelle.")
    @app_commands.describe(j√§sen="J√§sen, jolle asetetaan j√§√§hy", kesto="J√§√§hyn kesto", syy="Syy")
    @app_commands.checks.has_role("Mestari")
    async def mute(self, interaction: discord.Interaction, j√§sen: discord.Member, kesto: str, syy: str = "Ei syyt√§ annettu"):
        await kirjaa_komento_lokiin(self.bot, interaction, "/mute")
        await kirjaa_ga_event(self.bot, interaction.user.id, "mute_komento")
        if j√§sen == interaction.user:
            await interaction.response.send_message("Et voi asettaa itse√§si j√§√§hylle.", ephemeral=True)
            return
        try:
            seconds = int(kesto[:-1])
            unit = kesto[-1]
            if unit == "s":
                duration = timedelta(seconds=seconds)
            elif unit == "m":
                duration = timedelta(minutes=seconds)
            elif unit == "h":
                duration = timedelta(hours=seconds)
            else:
                await interaction.response.send_message("Virheellinen aikaformaatti. K√§yt√§ esim. 10s, 5m, 1h", ephemeral=True)
                return
            await j√§sen.timeout(duration, reason=f"{syy} (Asetti: {interaction.user})")
            await interaction.response.send_message(f"{j√§sen.mention} asetettu j√§√§hylle ajaksi {kesto}. Syy: {syy}")
            modlog_channel = self.bot.get_channel(MODLOG_CHANNEL_ID)
            if modlog_channel:
                await modlog_channel.send(
                    f"üîá **J√§√§hy asetettu**\nüë§ {j√§sen.mention}\n‚è± {kesto}\nüìù {syy}\nüëÆ {interaction.user.mention}"
                )
        except Exception as e:
            await interaction.response.send_message(f"Virhe asetettaessa j√§√§hy√§: {e}", ephemeral=True)

    # UNMUTE
    @app_commands.command(name="unmute", description="Poista j√§√§hy j√§senelt√§.")
    @app_commands.describe(j√§sen="J√§sen, jolta poistetaan j√§√§hy", syy="Syy")
    @app_commands.checks.has_role("Mestari")
    async def unmute(self, interaction: discord.Interaction, j√§sen: discord.Member, syy: str = "Ei syyt√§ annettu"):
        await kirjaa_komento_lokiin(self.bot, interaction, "/unmute")
        await kirjaa_ga_event(self.bot, interaction.user.id, "unmute_komento")
        if j√§sen.timed_out_until is None:
            await interaction.response.send_message(f"{j√§sen.mention} ei ole j√§√§hyll√§.", ephemeral=True)
            return
        try:
            await j√§sen.timeout(None, reason=f"{syy} (Poisti: {interaction.user})")
            await interaction.response.send_message(f"{j√§sen.mention} on vapautettu j√§√§hylt√§. Syy: {syy}")
        except Exception as e:
            await interaction.response.send_message(f"Virhe poistettaessa j√§√§hy√§: {e}", ephemeral=True)

    @commands.Cog.listener()
    async def on_app_command_error(self, interaction, error):
        await CommandErrorHandler(self.bot, interaction, error)

async def setup(bot: commands.Bot):
    cog = Moderation_mute(bot)
    await bot.add_cog(cog)