import discord
from discord.ext import commands
from discord import app_commands
from datetime import datetime, timedelta, timezone
from collections import defaultdict
from typing import List
import os
import pytz
import asyncio

from dotenv import load_dotenv
from bot.utils.logger import kirjaa_ga_event, kirjaa_komento_lokiin, autocomplete_bannatut_k√§ytt√§j√§t
from bot.utils.error_handler import CommandErrorHandler

load_dotenv()
MODLOG_CHANNEL_ID = int(os.getenv("MODLOG_CHANNEL_ID", 0))

class HuoltoView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=60)

    @discord.ui.button(label="Anna huollon tiedot", style=discord.ButtonStyle.primary)
    async def anna_tiedot(self, interaction: discord.Interaction, button: discord.ui.Button):
        modal = discord.ui.Modal(title="Huoltotiedot")
        kesto_input = discord.ui.TextInput(label="Huollon kesto", placeholder="Esim. 10s, 5m", custom_id="kesto")
        lisatiedot_input = discord.ui.TextInput(label="Lis√§tiedot", style=discord.TextStyle.paragraph, custom_id="lisatiedot")
        modal.add_item(kesto_input)
        modal.add_item(lisatiedot_input)

        async def modal_submit(modal_interaction: discord.Interaction):
            try:
                kesto = modal_interaction.data["components"][0]["components"][0]["value"]
                lisatiedot = modal_interaction.data["components"][1]["components"][0]["value"]
                seconds = int(kesto[:-1])
                unit = kesto[-1]
                delay = seconds if unit == "s" else seconds * 60 if unit == "m" else seconds * 3600 if unit == "h" else None
                if not delay:
                    await modal_interaction.response.send_message("Virheellinen aikamuoto!", ephemeral=True)
                    return
                huolto_kanava = discord.utils.get(modal_interaction.guild.text_channels, name="üõúbot-status") or await modal_interaction.guild.create_text_channel(name="bot-status")
                await huolto_kanava.send(f"Botti huoltotilassa {kesto}. Lis√§tiedot: {lisatiedot}")
                await modal_interaction.response.send_message(f"Huoltotiedot l√§hetetty kanavalle {huolto_kanava.mention}.", ephemeral=True)
            except Exception:
                await modal_interaction.response.send_message("Tapahtui virhe. Tarkista sy√∂tteet.", ephemeral=True)

        modal.on_submit = modal_submit
        await interaction.response.send_modal(modal)

aktiiviset_paivat = dict()

ajastin_aktiiviset = {}

import os

class ClearModal(discord.ui.Modal, title="Vahvista poisto"):
    def __init__(self, selected_channel: discord.TextChannel):
        super().__init__()
        self.selected_channel = selected_channel

        self.amount = discord.ui.TextInput(
            label="Viestien m√§√§r√§ (1‚Äì100, valinnainen)",
            placeholder="J√§t√§ tyhj√§ksi poistaaksesi kaiken (max 100)",
            required=False
        )
        self.confirmation = discord.ui.TextInput(
            label="Kirjoita KYLL√Ñ vahvistaaksesi",
            placeholder="KYLL√Ñ"
        )

        self.add_item(self.amount)
        self.add_item(self.confirmation)

    async def on_submit(self, interaction: discord.Interaction):
        await interaction.response.defer(ephemeral=True)

        if self.confirmation.value.strip().casefold() != "kyll√§":
            await interaction.followup.send("Vahvistus ep√§onnistui. Kirjoita KYLL√Ñ isolla tai pienell√§.", ephemeral=True)
            return

        try:
            m√§√§r√§ = int(self.amount.value.strip()) if self.amount.value.strip() else None
        except ValueError:
            await interaction.followup.send("Viestim√§√§r√§n pit√§√§ olla numero.", ephemeral=True)
            return

        if m√§√§r√§ is not None and (m√§√§r√§ < 1 or m√§√§r√§ > 100):
            await interaction.followup.send("Viestim√§√§r√§n pit√§√§ olla v√§lill√§ 1‚Äì100.", ephemeral=True)
            return

        try:
            poistettu = await self.selected_channel.purge(limit=m√§√§r√§)
            m√§√§r√§_poistettu = len(poistettu)

            await interaction.followup.send(
                f"{m√§√§r√§_poistettu} viesti√§ poistettu kanavasta {self.selected_channel.mention}.",
                ephemeral=True
            )

            load_dotenv()
            mod_log_id = os.getenv("MOD_LOG_CHANNEL_ID")
            if mod_log_id:
                log_channel = interaction.guild.get_channel(int(mod_log_id))
                if log_channel:
                    await log_channel.send(
                        f"üßπ **{interaction.user}** poisti {m√§√§r√§_poistettu} viesti√§ kanavasta {self.selected_channel.mention}."
                    )

        except discord.Forbidden:
            await interaction.followup.send("Ei oikeuksia poistaa viestej√§ t√§lt√§ kanavalta.", ephemeral=True)
        except discord.HTTPException:
            await interaction.followup.send("Poisto ep√§onnistui. Yrit√§ my√∂hemmin uudelleen.", ephemeral=True)

class KanavaSelect(discord.ui.Select):
    def __init__(self, kanavat, sivu):
        self.sivu = sivu
        alku = sivu * 25
        loppu = alku + 25
        kanavat_sivulla = kanavat[alku:loppu]

        options = [
            discord.SelectOption(label=kanava.name, value=str(kanava.id))
            for kanava in kanavat_sivulla
        ]
        super().__init__(placeholder="Valitse kanava", options=options)

    async def callback(self, interaction: discord.Interaction):
        selected_channel = interaction.guild.get_channel(int(self.values[0]))
        if not selected_channel:
            await interaction.response.send_message("Kanavaa ei l√∂ytynyt.", ephemeral=True)
            return
        await interaction.response.send_modal(ClearModal(selected_channel))

class ClearView(discord.ui.View):
    def __init__(self, kanavat, sivu=0):
        super().__init__(timeout=60)
        self.kanavat = kanavat
        self.sivu = sivu
        self.max_sivu = (len(kanavat) - 1) // 25

        self.select = KanavaSelect(kanavat, sivu)
        self.add_item(self.select)

        if self.max_sivu > 0:
            self.add_item(self.EdellinenButton())
            self.add_item(self.SeuraavaButton())

        self.add_item(self.PeruutaButton())  

    class EdellinenButton(discord.ui.Button):
        def __init__(self):
            super().__init__(label="‚¨ÖÔ∏è Edellinen", style=discord.ButtonStyle.secondary)

        async def callback(self, interaction: discord.Interaction):
            view: ClearView = self.view
            if view.sivu > 0:
                uusi_sivu = view.sivu - 1
                uusi_view = ClearView(view.kanavat, uusi_sivu)
                await interaction.response.edit_message(
                    content=f"Sivu {uusi_sivu + 1} / {view.max_sivu + 1}",
                    view=uusi_view
                )
            else:
                await interaction.response.defer()

    class SeuraavaButton(discord.ui.Button):
        def __init__(self):
            super().__init__(label="Seuraava ‚û°Ô∏è", style=discord.ButtonStyle.secondary)

        async def callback(self, interaction: discord.Interaction):
            view: ClearView = self.view
            if view.sivu < view.max_sivu:
                uusi_sivu = view.sivu + 1  # T√§m√§ oli v√§√§rin aiemmin
                uusi_view = ClearView(view.kanavat, uusi_sivu)
                await interaction.response.edit_message(
                    content=f"Sivu {uusi_sivu + 1} / {view.max_sivu + 1}",
                    view=uusi_view
                )
            else:
                await interaction.response.defer()

    class PeruutaButton(discord.ui.Button):
        def __init__(self):
            super().__init__(label="‚ùå Peruuta", style=discord.ButtonStyle.danger)

        async def callback(self, interaction: discord.Interaction):
            await interaction.response.edit_message(content="Toiminto peruutettu.", view=None)

class IlmoitusModal(discord.ui.Modal, title="Luo ilmoitus"):
    otsikko = discord.ui.TextInput(label="Otsikko", placeholder="Esim. Huoltotauko")
    teksti = discord.ui.TextInput(label="P√§√§teksti", style=discord.TextStyle.paragraph, placeholder="Kuvaile mit√§ tapahtuu...")
    lisatiedot = discord.ui.TextInput(label="Lis√§tiedot", required=False, placeholder="Lis√§info, linkki jne.")
    kuvalinkki = discord.ui.TextInput(label="(Valinnainen) Kuvalinkki", required=False, placeholder="https://...")

    def __init__(self, target_channel, user):
        super().__init__()
        self.target_channel = target_channel
        self.user = user

    async def on_submit(self, interaction: discord.Interaction):
        viesti = f"# {self.otsikko.value}\n> {self.teksti.value}"
        if self.lisatiedot.value:
            viesti += f"\n- {self.lisatiedot.value}"

        embed = discord.Embed(description=viesti)

        if self.kuvalinkki.value:
            embed.set_image(url=self.kuvalinkki.value)

        await self.target_channel.send(embed=embed)
        await interaction.response.send_message("Ilmoitus l√§hetetty onnistuneesti!", ephemeral=True)

aktiiviset_paivat = dict()

class Moderation(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    async def start_monitors(self):
        from utils.moderation_tasks import (
            tarkista_ostojen_kuukausi,
            check_deletions,
            tarkista_puhekanavat,
            tarkista_paivat
        )
        if not tarkista_ostojen_kuukausi.is_running():
            tarkista_ostojen_kuukausi.start()
        if not check_deletions.is_running():
            check_deletions.start()
        if not tarkista_puhekanavat.is_running():
            tarkista_puhekanavat.start()
        if not tarkista_paivat.is_running():
            tarkista_paivat.start()

    # MUTE
    @app_commands.command(name="mute", description="Aseta j√§√§hy j√§senelle.")
    @app_commands.describe(j√§sen="J√§sen, jolle asetetaan j√§√§hy", kesto="J√§√§hyn kesto", syy="Syy")
    @app_commands.checks.has_role("Mestari")
    async def mute(self, interaction: discord.Interaction, j√§sen: discord.Member, kesto: str, syy: str = "Ei syyt√§ annettu"):
        await kirjaa_komento_lokiin(self.bot, interaction, "/mute")
        await kirjaa_ga_event(self.bot, interaction.user.id, "mute_komento")
        if j√§sen == interaction.user:
            await interaction.response.send_message("Et voi asettaa itse√§si j√§√§hylle.", ephemeral=True)
            return
        try:
            seconds = int(kesto[:-1])
            unit = kesto[-1]
            if unit == "s":
                duration = timedelta(seconds=seconds)
            elif unit == "m":
                duration = timedelta(minutes=seconds)
            elif unit == "h":
                duration = timedelta(hours=seconds)
            else:
                await interaction.response.send_message("Virheellinen aikaformaatti. K√§yt√§ esim. 10s, 5m, 1h", ephemeral=True)
                return
            await j√§sen.timeout(duration, reason=f"{syy} (Asetti: {interaction.user})")
            await interaction.response.send_message(f"{j√§sen.mention} asetettu j√§√§hylle ajaksi {kesto}. Syy: {syy}")
            modlog_channel = self.bot.get_channel(MODLOG_CHANNEL_ID)
            if modlog_channel:
                await modlog_channel.send(
                    f"üîá **J√§√§hy asetettu**\nüë§ {j√§sen.mention}\n‚è± {kesto}\nüìù {syy}\nüëÆ {interaction.user.mention}"
                )
        except Exception as e:
            await interaction.response.send_message(f"Virhe asetettaessa j√§√§hy√§: {e}", ephemeral=True)

    # UNMUTE
    @app_commands.command(name="unmute", description="Poista j√§√§hy j√§senelt√§.")
    @app_commands.describe(j√§sen="J√§sen, jolta poistetaan j√§√§hy", syy="Syy")
    @app_commands.checks.has_role("Mestari")
    async def unmute(self, interaction: discord.Interaction, j√§sen: discord.Member, syy: str = "Ei syyt√§ annettu"):
        await kirjaa_komento_lokiin(self.bot, interaction, "/unmute")
        await kirjaa_ga_event(self.bot, interaction.user.id, "unmute_komento")
        if j√§sen.timed_out_until is None:
            await interaction.response.send_message(f"{j√§sen.mention} ei ole j√§√§hyll√§.", ephemeral=True)
            return
        try:
            await j√§sen.timeout(None, reason=f"{syy} (Poisti: {interaction.user})")
            await interaction.response.send_message(f"{j√§sen.mention} on vapautettu j√§√§hylt√§. Syy: {syy}")
        except Exception as e:
            await interaction.response.send_message(f"Virhe poistettaessa j√§√§hy√§: {e}", ephemeral=True)

    # WARN
    @app_commands.command(name="warn", description="Anna varoitus k√§ytt√§j√§lle.")
    @app_commands.describe(member="K√§ytt√§j√§", syy="Syy")
    @app_commands.checks.has_role("Mestari")
    async def warn(self, interaction: discord.Interaction, member: discord.Member, syy: str = "Ei syyt√§ annettu"):
        await kirjaa_komento_lokiin(self.bot, interaction, "/warn")
        await kirjaa_ga_event(self.bot, interaction.user.id, "warn_komento")
        try:
            await member.send(f"Olet saanut varoituksen: {syy}")
        except discord.Forbidden:
            await interaction.followup.send("YV ep√§onnistui.", ephemeral=True)
        await interaction.response.send_message(f"{member.mention} sai varoituksen.")
        modlog = self.bot.get_channel(MODLOG_CHANNEL_ID)
        if modlog:
            await modlog.send(f"[VAROITUS] {member.mention} | ID: {member.id} | Syy: {syy} | Antaja: {interaction.user.mention}")

    # UNWARN
    @app_commands.command(name="unwarn", description="Poista k√§ytt√§j√§n varoitus.")
    @app_commands.describe(member="K√§ytt√§j√§", kaikki="Poista kaikki varoitukset.")
    @app_commands.checks.has_role("Mestari")
    async def unwarn(self, interaction: discord.Interaction, member: discord.Member, kaikki: bool = False):
        await kirjaa_komento_lokiin(self.bot, interaction, "/unwarn")
        await kirjaa_ga_event(self.bot, interaction.user.id, "unwarn_komento")
        modlog = self.bot.get_channel(MODLOG_CHANNEL_ID)
        if not modlog:
            await interaction.response.send_message("Moderaatiokanavaa ei l√∂ytynyt.", ephemeral=True)
            return
        poistettu = 0
        async for msg in modlog.history(limit=1000):
            if msg.author == self.bot.user and f"ID: {member.id}" in msg.content:
                await msg.delete()
                poistettu += 1
                if not kaikki:
                    break
        await interaction.response.send_message(
            f"{member.mention} varoituksista poistettiin {poistettu} {'kaikki' if kaikki else 'yksi'}."
        )

    # VAROITUKSET
    @app_commands.command(name="varoitukset", description="N√§yt√§ k√§ytt√§j√§n varoitukset.")
    @app_commands.describe(member="K√§ytt√§j√§")
    @app_commands.checks.has_role("Mestari")
    async def varoitukset(self, interaction: discord.Interaction, member: discord.Member):
        await kirjaa_komento_lokiin(self.bot, interaction, "/varoitukset")
        await kirjaa_ga_event(self.bot, interaction.user.id, "varoitukset_komento")
        modlog = self.bot.get_channel(MODLOG_CHANNEL_ID)
        if not modlog:
            await interaction.response.send_message("Moderaatiokanavaa ei l√∂ytynyt.", ephemeral=True)
            return
        lista = []
        async for msg in modlog.history(limit=1000):
            if f"ID: {member.id}" in msg.content:
                lista.append(msg.content)
        if not lista:
            await interaction.response.send_message("Ei varoituksia.", ephemeral=True)
            return
        vastaus = "\n".join([f"{i+1}. {v.split(' | Syy: ')[-1].split(' |')[0]}" for i, v in enumerate(lista)])
        await interaction.response.send_message(f"{member.mention} on saanut {len(lista)} varoitusta:\n{vastaus}", ephemeral=True)

    # KICK
    @app_commands.command(name="kick", description="Poista k√§ytt√§j√§ palvelimelta.")
    @app_commands.describe(member="K√§ytt√§j√§", syy="Syy")
    @app_commands.checks.has_role("Mestari")
    @app_commands.checks.has_permissions(kick_members=True)
    async def kick(self, interaction: discord.Interaction, member: discord.Member, syy: str = "Ei syyt√§ annettu"):
        await kirjaa_komento_lokiin(self.bot, interaction, "/kick")
        await kirjaa_ga_event(self.bot, interaction.user.id, "kick_komento")
        try:
            await member.send(f"Sinut on potkittu. Syy: {syy}")
        except discord.Forbidden:
            pass
        try:
            await member.kick(reason=syy)
            await interaction.response.send_message(f"{member.mention} on potkittu.")
        except Exception as e:
            await interaction.response.send_message(f"Potku ep√§onnistui: {e}", ephemeral=True)

    # BAN
    @app_commands.command(name="ban", description="Bannaa k√§ytt√§j√§.")
    @app_commands.describe(member="K√§ytt√§j√§", syy="Syy")
    @app_commands.checks.has_role("Mestari")
    @app_commands.checks.has_permissions(ban_members=True)
    async def ban(self, interaction: discord.Interaction, member: discord.Member, syy: str = "Ei syyt√§ annettu"):
        await kirjaa_komento_lokiin(self.bot, interaction, "/ban")
        await kirjaa_ga_event(self.bot, interaction.user.id, "ban_komento")
        try:
            await member.send(f"Bannattu. Syy: {syy}")
        except discord.Forbidden:
            pass
        try:
            await member.ban(reason=syy)
            await interaction.response.send_message(f"{member.mention} on bannattu.")
        except Exception as e:
            await interaction.response.send_message(f"Bannaus ep√§onnistui: {e}", ephemeral=True)
        except discord.Forbidden:
            await interaction.response.send_message("Ei oikeuksia bannata t√§t√§ k√§ytt√§j√§√§.", ephemeral=True)
        except Exception as e:
            await interaction.response.send_message(f"Virhe bannatessa k√§ytt√§j√§√§: {str(e)}", ephemeral=True)

    # UNBAN
    @app_commands.command(name="unban", description="Poista k√§ytt√§j√§n porttikielto.")
    @app_commands.describe(k√§ytt√§j√§nimi="K√§ytt√§j√§nimi muodossa nimi#0001", syy="Syy unbannille.")
    @app_commands.checks.has_role("Mestari")
    @app_commands.checks.has_permissions(ban_members=True)
    @app_commands.autocomplete(k√§ytt√§j√§nimi=autocomplete_bannatut_k√§ytt√§j√§t)
    async def unban(self, interaction: discord.Interaction, k√§ytt√§j√§nimi: str, syy: str = "Ei syyt√§ annettu"):
        await interaction.response.defer(thinking=True, ephemeral=True)
        await kirjaa_komento_lokiin(self.bot, interaction, "/unban")
        await kirjaa_ga_event(self.bot, interaction.user.id, "unban_komento")

        try:
            banned_users = [entry async for entry in interaction.guild.bans()]
        except Exception as e:
            await interaction.followup.send(f"Virhe haettaessa banneja: {e}", ephemeral=True)
            return

        nimi, _, discrim = k√§ytt√§j√§nimi.partition("#")

        if "#" in k√§ytt√§j√§nimi and not discrim.isdigit():
            await interaction.followup.send("Virheellinen k√§ytt√§j√§nimi. K√§yt√§ muotoa nimi#1234.", ephemeral=True)
            return

        for ban_entry in banned_users:
            user = ban_entry.user
            match = (user.name, user.discriminator) == (nimi, discrim) if discrim else user.name == k√§ytt√§j√§nimi

            if match:
                try:
                    await user.send(f"Porttikielto palvelimelta {interaction.guild.name} on poistettu. Syy: {syy}")
                except discord.Forbidden:
                    pass

                await interaction.guild.unban(user, reason=syy)
                await interaction.followup.send(f"{user.name}#{user.discriminator} unbannattu. Syy: {syy}")
                return

        await interaction.followup.send("K√§ytt√§j√§√§ ei l√∂ytynyt bannatuista.", ephemeral=True)

    # HUOLTO
    @app_commands.command(name="huolto", description="Aseta botti huoltotilaan.")
    @app_commands.checks.has_role("Mestari")
    async def huolto(self, interaction: discord.Interaction):
        await kirjaa_komento_lokiin(self.bot, interaction, "/huolto")
        await kirjaa_ga_event(self.bot, interaction.user.id, "huolto_komento")
        await interaction.response.send_message(
            "Paina alla olevaa painiketta antaaksesi huollon tiedot:",
            view=HuoltoView(), ephemeral=True
        )

    # SET ROLE
    @app_commands.command(name="set_role", description="Lis√§√§ roolin k√§ytt√§j√§lle.")
    @app_commands.checks.has_role("Mestari")
    async def set_role(self, interaction: discord.Interaction, k√§ytt√§j√§: discord.Member, rooli: discord.Role):
        await kirjaa_komento_lokiin(self.bot, interaction, "/set_role")
        await kirjaa_ga_event(self.bot, interaction.user.id, "set_role_komento")
        await k√§ytt√§j√§.add_roles(rooli)
        await interaction.response.send_message(
            f"Rooli **{rooli.name}** lis√§tty k√§ytt√§j√§lle {k√§ytt√§j√§.mention}.‚úÖ", ephemeral=True
        )

    # REMOVE ROLE
    @app_commands.command(name="remove_role", description="Poistaa roolin k√§ytt√§j√§lt√§.")
    @app_commands.checks.has_role("Mestari")
    async def remove_role(self, interaction: discord.Interaction, k√§ytt√§j√§: discord.Member, rooli: discord.Role):
        await kirjaa_komento_lokiin(self.bot, interaction, "/remove_role")
        await kirjaa_ga_event(self.bot, interaction.user.id, "remove_role_komento")
        await k√§ytt√§j√§.remove_roles(rooli)
        await interaction.response.send_message(
            f"Rooli **{rooli.name}** poistettu k√§ytt√§j√§lt√§ {k√§ytt√§j√§.mention}. üóëÔ∏è", ephemeral=True
        )

    # TOIMINTA
    @app_commands.command(name="toiminta", description="N√§yt√§ aktiivisin kanava per j√§sen")
    @app_commands.describe(j√§sen="Valitse j√§sen")
    @app_commands.checks.has_role("Mestari")
    async def toiminta(self, interaction: discord.Interaction, j√§sen: discord.Member):
        await kirjaa_komento_lokiin(self.bot, interaction, "/toiminta")
        await kirjaa_ga_event(self.bot, interaction.user.id, "toiminta_komento")
        await interaction.response.defer(ephemeral=True)

        viestim√§√§r√§t = {}
        kanavat = [c for c in interaction.guild.text_channels if c.permissions_for(j√§sen).read_messages]

        for kanava in kanavat:
            try:
                count = sum(1 async for msg in kanava.history(limit=1000) if msg.author == j√§sen)
                if count > 0:
                    viestim√§√§r√§t[kanava] = count
            except discord.Forbidden:
                continue

        if not viestim√§√§r√§t:
            await interaction.followup.send("Ei viestej√§ l√∂ytynyt.")
            return

        aktiivisin = max(viestim√§√§r√§t, key=viestim√§√§r√§t.get)
        m√§√§r√§ = viestim√§√§r√§t[aktiivisin]
        await interaction.followup.send(
            f"**{j√§sen.display_name}** on l√§hett√§nyt eniten viestej√§ kanavalle {aktiivisin.mention} ({m√§√§r√§} viesti√§)."
        )

    # VIESTIT
    @app_commands.command(name="viestit", description="N√§yt√§ palvelimen koko viestim√§√§r√§t")
    @app_commands.checks.has_role("Mestari")
    async def viestit(self, interaction: discord.Interaction):
        await kirjaa_komento_lokiin(self.bot, interaction, "/viestit")
        await kirjaa_ga_event(self.bot, interaction.user.id, "viestit_komento")
        await interaction.response.defer(ephemeral=True)
        viestim√§√§r√§t = defaultdict(int)
        kanavat = [c for c in interaction.guild.text_channels if c.permissions_for(interaction.guild.me).read_messages]

        for kanava in kanavat:
            try:
                async for msg in kanava.history(limit=200):
                    if not msg.author.bot:
                        viestim√§√§r√§t[msg.author] += 1
            except discord.Forbidden:
                continue

        if not viestim√§√§r√§t:
            await interaction.followup.send("Ei l√∂ytynyt viestej√§.")
            return

        top = sorted(viestim√§√§r√§t.items(), key=lambda x: x[1], reverse=True)[:5]
        vastaus = "\n".join(f"{i+1}. {k.display_name} ‚Äì {m} viesti√§" for i, (k, m) in enumerate(top))
        await interaction.followup.send("**Top 5 aktiivisinta k√§ytt√§j√§√§:**\n" + vastaus)

    # SAMMUTUS
    @app_commands.command(name="sammutus", description="Sammuta botti.")
    @app_commands.checks.has_role("Mestari")
    async def sammutus(self, interaction: discord.Interaction):
        await kirjaa_komento_lokiin(self.bot, interaction, "/sammutus")
        await kirjaa_ga_event(self.bot, interaction.user.id, "sammutus_komento")

        status_kanava = discord.utils.get(interaction.guild.text_channels, name="üõúbot-status")
        if not status_kanava:
            status_kanava = await interaction.guild.create_text_channel(name="bot-status")

        async for message in status_kanava.history(limit=100):
            await message.delete()

        timezone = pytz.timezone('Europe/Helsinki')
        sammutusaika = datetime.now(timezone).strftime('%d-%m-%Y %H:%M:%S')
        await status_kanava.send(f"Botti sammutettu {sammutusaika}.")
        await interaction.response.send_message("Botti sammuu...", ephemeral=True)

        for user_id, task in ajastin_aktiiviset.items():
            if not task.done():
                task.cancel()
        ajastin_aktiiviset.clear()

        await self.bot.close()

    # VAIHDA NIMIMERKKI
    @app_commands.command(name="vaihda_nimimerkki", description="Vaihda j√§senen nimimerkki palvelimella.")
    @app_commands.checks.has_permissions(manage_nicknames=True)
    @app_commands.checks.has_role("Mestari")
    async def vaihda_nimimerkki(self, interaction: discord.Interaction, jasen: discord.Member, uusi_nimimerkki: str):
        await kirjaa_komento_lokiin(self.bot, interaction, "/vaihda_nimimerkki")
        await kirjaa_ga_event(self.bot, interaction.user.id, "vaihda_nimimerkki_komento")
        try:
            await jasen.edit(nick=uusi_nimimerkki)
            await interaction.response.send_message(f"{jasen.mention} nimimerkki vaihdettu: {uusi_nimimerkki}")
        except discord.Forbidden:
            await interaction.response.send_message("En voi vaihtaa t√§m√§n j√§senen nimimerkki√§.", ephemeral=True)
        except Exception as e:
            await interaction.response.send_message(f"Virhe: {e}", ephemeral=True)

    # UUDELLEENK√ÑYNNISTYS
    @app_commands.command(name="uudelleenk√§ynnistys", description="K√§ynnist√§ botti uudelleen.")
    @app_commands.checks.has_role("Mestari")
    async def uudelleenkaynnistys(self, interaction: discord.Interaction):
        await kirjaa_komento_lokiin(self.bot, interaction, "/uudelleenk√§ynnistys")
        await kirjaa_ga_event(self.bot, interaction.user.id, "uudelleenk√§ynnistys_komento")

        status_kanava = discord.utils.get(interaction.guild.text_channels, name="üõúbot-status") or await interaction.guild.create_text_channel(name="bot-status")
        async for msg in status_kanava.history(limit=100):
            await msg.delete()

        await status_kanava.send("Botti k√§ynnistyy uudelleen...")
        await interaction.response.send_message("Botti k√§ynnistet√§√§n uudelleen...", ephemeral=True)
        await self.bot.close()

    # ILMOITUS
    @app_commands.command(name="ilmoitus", description="Luo ilmoitus botin nimiss√§ ja l√§het√§ se valittuun kanavaan.")
    @app_commands.checks.has_role("Mestari")
    @app_commands.checks.has_permissions(manage_channels=True)
    @app_commands.describe(kanava="Kanava, johon ilmoitus l√§hetet√§√§n")
    async def ilmoitus(self, interaction: discord.Interaction, kanava: discord.TextChannel):
        await interaction.response.send_modal(IlmoitusModal(target_channel=kanava, user=interaction.user))
        try:
            await kirjaa_komento_lokiin(self.bot, interaction, "/ilmoitus")
            await kirjaa_ga_event(self.bot, interaction.user.id, "ilmoitus_komento")
        except Exception as e:
            print(f"Task creation failed: {e}")

    # CLEAR
    @app_commands.command(name="clear", description="Poista viestej√§ valitusta kanavasta.")
    @app_commands.checks.has_role("Mestari")
    async def clear(self, interaction: discord.Interaction):
        await kirjaa_komento_lokiin(self.bot, interaction, "/clear")
        await kirjaa_ga_event(self.bot, interaction.user.id, "clear_komento")

        kanavat = [
            c for c in interaction.guild.text_channels
            if c.permissions_for(interaction.user).manage_messages
        ]

        if not kanavat:
            await interaction.response.send_message(
                "Ei oikeuksia viestien poistoon miss√§√§n kanavassa.",
                ephemeral=True
            )
            return

        max_sivu = (len(kanavat) - 1) // 25
        nykyinen_sivu = 0

        await interaction.response.send_message(
            content=f"Sivu {nykyinen_sivu + 1} / {max_sivu + 1}\nValitse kanava ja vahvista:",
            view=ClearView(kanavat, nykyinen_sivu),
            ephemeral=True
        )

    # LUKITSE
    @app_commands.command(name="lukitse", description="Lukitsee kanavan kaikilta.")
    @app_commands.checks.has_role("Mestari")
    async def lukitse(self, interaction: discord.Interaction, kanava: discord.TextChannel):
        await kirjaa_komento_lokiin(self.bot, interaction, "/lukitse")
        await kirjaa_ga_event(self.bot, interaction.user.id, "lukitse_komento")
        await kanava.set_permissions(interaction.guild.default_role, send_messages=False)
        await kanava.set_permissions(interaction.user, send_messages=True)
        await interaction.response.send_message(f"Kanava {kanava.mention} on lukittu onnistuneesti!", ephemeral=True)

    # PING
    @app_commands.command(name="ping", description="N√§yt√§ botin viive.")
    async def ping(self, interaction: discord.Interaction):
        await kirjaa_komento_lokiin(self.bot, interaction, "/ping")
        await kirjaa_ga_event(self.bot, interaction.user.id, "ping_komento")
        latency = round(self.bot.latency * 1000)
        await interaction.response.send_message(f"Botin viive on {latency} ms.")

    # AKTIIVISIMMAT
    @app_commands.command(name="aktiivisimmat", description="N√§yt√§ aktiivisimmat k√§ytt√§j√§t tai aloita viestiseuranta.")
    @app_commands.checks.has_role("Mestari")
    @app_commands.describe(
        paiva="Muoto YYYY-MM-DD. Tyhj√§ = nykyhetki",
        tarkista="N√§yt√§ onko seuranta k√§ynniss√§"
    )
    async def aktiivisimmat(self, interaction: discord.Interaction, paiva: str = None, tarkista: bool = False):
        await kirjaa_komento_lokiin(self.bot, interaction, "/aktiivisimmat")
        await kirjaa_ga_event(self.bot, interaction.user.id, "aktiivisimmat_komento")
        if paiva or tarkista:
            if "Mestari" not in [role.name for role in interaction.user.roles]:
                await interaction.response.send_message("T√§m√§ toiminto vaatii Mestari-roolin.", ephemeral=True)
                return
        else:
            if "24G" not in [role.name for role in interaction.user.roles]:
                await interaction.response.send_message("T√§m√§ toiminto vaatii 24G-roolin.", ephemeral=True)
                return

        await interaction.response.defer(ephemeral=True)

        if tarkista:
            for paiva_key, data in aktiiviset_paivat.items():
                if data["guild_id"] == interaction.guild.id:
                    await interaction.followup.send(f"Viestiseuranta on t√§ll√§ palvelimella p√§√§ll√§ (aloitettu {paiva_key}).")
                    return
            await interaction.followup.send("Viestiseuranta on pois p√§√§lt√§.")
            return

        if paiva:
            try:
                pvm = datetime.strptime(paiva, "%Y-%m-%d").date()
            except ValueError:
                await interaction.followup.send("Virheellinen p√§iv√§m√§√§r√§muoto. K√§yt√§ muotoa YYYY-MM-DD.")
                return

            aktiiviset_paivat[pvm] = {
                "guild_id": interaction.guild.id,
                "viestim√§√§r√§t": defaultdict(int)
            }
            await interaction.followup.send(f"Aloitettiin viestiseuranta p√§iv√§lle {paiva}.")
            return

        # N√§yt√§ 24h ajalta
        alku = datetime.now(timezone.utc) - timedelta(days=1)
        viestim√§√§r√§t = defaultdict(int)
        kanavat = [c for c in interaction.guild.text_channels if c.permissions_for(interaction.guild.me).read_messages]

        for kanava in kanavat:
            try:
                async for msg in kanava.history(after=alku, limit=None):
                    if not msg.author.bot:
                        viestim√§√§r√§t[msg.author] += 1
            except discord.Forbidden:
                continue

        if not viestim√§√§r√§t:
            await interaction.followup.send("Ei l√∂ytynyt viestej√§ viimeisen 24h ajalta.")
            return

        top = sorted(viestim√§√§r√§t.items(), key=lambda x: x[1], reverse=True)[:5]
        teksti = "\n".join(f"{i+1}. {k.display_name} ‚Äì {m} viesti√§" for i, (k, m) in enumerate(top))
        await interaction.followup.send("**Top 5 aktiivisinta k√§ytt√§j√§√§ (24h):**\n" + teksti)

    # REAGOI
    @app_commands.command(name="reagoi", description="Reagoi viestiin, joka sis√§lt√§√§ tietyn tekstin.")
    @app_commands.describe(hakusana="Osa viestist√§", emoji="Emoji, jolla reagoidaan")
    @app_commands.checks.has_role("Mestari")
    async def reagoi(self, interaction: discord.Interaction, hakusana: str, emoji: str):
        await kirjaa_komento_lokiin(self.bot, interaction, "/reagoi")
        await kirjaa_ga_event(self.bot, interaction.user.id, "reagoi_komento")
        try:
            messages = [msg async for msg in interaction.channel.history(limit=100)]
            target = next((msg for msg in messages if hakusana.lower() in msg.content.lower()), None)
            if target:
                await target.add_reaction(emoji)
                await interaction.response.send_message(
                    f"Reagoin viestiin: \"{target.content}\" {emoji}", ephemeral=True
                )
            else:
                await interaction.response.send_message(
                    "Ei l√∂ytynyt viesti√§, joka sis√§lt√§√§ annetun hakusanan.", ephemeral=True
                )
        except discord.HTTPException:
            await interaction.response.send_message("Emoji ei kelpaa tai tapahtui virhe.", ephemeral=True)
        except Exception as e:
            await interaction.response.send_message(f"Virhe: {e}", ephemeral=True)

    @commands.Cog.listener()
    async def on_app_command_error(self, interaction, error):
        await CommandErrorHandler(self.bot, interaction, error)

async def setup(bot: commands.Bot):
    cog = Moderation(bot)
    await bot.add_cog(cog)