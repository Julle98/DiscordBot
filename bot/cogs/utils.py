from discord.ext import commands
from discord import app_commands
import discord
import os
import random
import asyncio
import pytz
from datetime import datetime
from discord import Interaction
from discord.ui import Modal, View
import re
import uuid
from typing import Optional, Literal
from bot.utils.error_handler import CommandErrorHandler
import json

from dotenv import load_dotenv
from bot.utils.logger import kirjaa_komento_lokiin, kirjaa_ga_event
from bot.utils.xp_utils import make_xp_content

HELP_DATA_FILE = os.getenv("HELP_DATA_FILE")

def tallenna_pyynt√∂(pyynt√∂_id, k√§ytt√§j√§_id, aihe, kuvaus, timestamp):
    data = {}
    if os.path.exists(HELP_DATA_FILE):
        with open(HELP_DATA_FILE, "r", encoding="utf-8") as f:
            try:
                data = json.load(f)
            except json.JSONDecodeError:
                data = {}

    data[pyynt√∂_id] = {
        "k√§ytt√§j√§_id": k√§ytt√§j√§_id,
        "aihe": aihe,
        "kuvaus": kuvaus,
        "timestamp": timestamp
    }

    with open(HELP_DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

class HelpResponseModal(discord.ui.Modal, title="Kirjoita palaute k√§ytt√§j√§lle"):
    def __init__(self, toiminto, alkuperainen_embed, alkuperainen_viesti, vastaanottaja):
        super().__init__()
        self.toiminto = toiminto  
        self.embed = alkuperainen_embed
        self.viesti = alkuperainen_viesti
        self.vastaanottaja = vastaanottaja

        self.palaute = discord.ui.TextInput(
            label="Kirjoita palautteesi",
            style=discord.TextStyle.paragraph,
            required=True
        )
        self.xp_maara = discord.ui.TextInput(
            label="XP-palkinto (valinnainen)",
            placeholder="Esim. 10",
            required=False
        )

        self.add_item(self.palaute)
        self.add_item(self.xp_maara)

    async def on_submit(self, interaction: discord.Interaction):
        alkuper√§inen_id = self.embed.title.split("ID:")[-1].strip() if "ID:" in self.embed.title else "tuntematon"

        xp_arvo = self.xp_maara.value.strip()
        xp_m√§√§r√§ = int(xp_arvo) if xp_arvo.isdigit() else 0
        xp_viesti = None

        if xp_m√§√§r√§ > 0:
            xp_viesti = make_xp_content(self.vastaanottaja.id, xp_m√§√§r√§)

        try:
            xp_maininta = f"\n\nüéâ Sinulle on my√∂nnetty {xp_m√§√§r√§} XP-pistett√§!" if xp_m√§√§r√§ > 0 else ""
            await self.vastaanottaja.send(
                f"**Vastaus pyynt√∂√∂si ({self.toiminto}) ‚Äì ID: `{alkuper√§inen_id}`**\n{self.palaute.value}{xp_maininta}",
                embed=self.embed
            )
        except discord.Forbidden:
            await interaction.response.send_message("K√§ytt√§j√§lle ei voitu l√§hett√§√§ viesti√§ (DM estetty).", ephemeral=True)
            await self.viesti.edit(view=None)
            return

        uusi_embed = self.embed.copy()
        emoji = "üì¨" if self.toiminto == "vastattu" else "‚úÖ"
        vari = discord.Color.blurple() if self.toiminto == "vastattu" else discord.Color.green()
        alku_footer = self.embed.footer.text or ""

        footer_teksti = f"{alku_footer} ‚Ä¢ {self.toiminto.capitalize()}"
        if self.toiminto == "vastattu" and xp_m√§√§r√§ > 0:
            footer_teksti += f" ‚Ä¢ +{xp_m√§√§r√§} XP"

        uusi_embed.title = f"{emoji} {self.embed.title}"
        uusi_embed.color = vari
        uusi_embed.set_footer(
            text=footer_teksti,
            icon_url=self.embed.footer.icon_url
        )

        await self.viesti.edit(embed=uusi_embed, view=None)
        await interaction.response.send_message(
            f"Pyynt√∂ on {self.toiminto}. (ID: `{alkuper√§inen_id}`)" + (f" üéâ +{xp_m√§√§r√§} XP my√∂nnetty k√§ytt√§j√§lle!" if xp_m√§√§r√§ > 0 else ""),
            ephemeral=True
        )

class HelpButtons(discord.ui.View):
    def __init__(self, user, embed):
        super().__init__(timeout=None)
        self.user = user
        self.embed = embed

    @discord.ui.button(label="üì• Avaa ja vastaa", style=discord.ButtonStyle.primary)
    async def reply_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_modal(
            HelpResponseModal("vastattu", self.embed, interaction.message, self.user)
        )

    @discord.ui.button(label="‚ùå Sulje", style=discord.ButtonStyle.danger)
    async def close_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_modal(
            HelpResponseModal("suljettu", self.embed, interaction.message, self.user)
        )

class HelpModal(discord.ui.Modal, title="L√§het√§ lis√§tietoa"):
    def __init__(self, valinta, target_channel):
        super().__init__()
        self.valinta = valinta
        self.target_channel = target_channel

        self.kuvaus = discord.ui.TextInput(
            label="Kuvaile ongelmaasi/tarpeesi",
            style=discord.TextStyle.paragraph
        )
        self.kuva_linkki = discord.ui.TextInput(
            label="(Valinnainen) Kuvalinkki",
            required=False,
            placeholder="https://... (jos haluat)"
        )
        self.pyynt√∂_id = discord.ui.TextInput(
            label="(Valinnainen) Pyynn√∂n ID",
            required=False,
            placeholder="Jos viittaat aiempaan pyynt√∂√∂n"
        )

        self.add_item(self.kuvaus)
        self.add_item(self.kuva_linkki)
        self.add_item(self.pyynt√∂_id)

    async def on_submit(self, interaction: discord.Interaction):
        uusi_id = str(uuid.uuid4())[:8]
        k√§ytetty_id = self.pyynt√∂_id.value.strip() if self.pyynt√∂_id.value.strip() else uusi_id

        embed = discord.Embed(
            title=f"Uusi pyynt√∂ /help-komennolla ‚Ä¢ ID: {k√§ytetty_id}",
            color=discord.Color.blue(),
        )

        embed.add_field(name="Valinta", value=self.valinta.label, inline=False)
        embed.add_field(name="Kuvaus", value=self.kuvaus.value, inline=False)

        if self.kuva_linkki.value:
            embed.set_image(url=self.kuva_linkki.value)

        embed.set_footer(
            text=f"{interaction.user} ({interaction.user.id})",
            icon_url=interaction.user.display_avatar.url
        )

        tallenna_pyynt√∂(
            pyynt√∂_id=k√§ytetty_id,
            k√§ytt√§j√§_id=interaction.user.id,
            aihe=self.valinta.label,
            kuvaus=self.kuvaus.value,
            timestamp=datetime.utcnow().isoformat()
        )

        self.user = interaction.user
        await self.target_channel.send(embed=embed, view=HelpButtons(self.user, embed))

        await interaction.response.send_message(
            f"Pyynt√∂si on l√§hetetty! Kiitos!\nTunnisteesi: `{k√§ytetty_id}` ‚Äì k√§yt√§ t√§t√§, jos haluat viitata pyynt√∂√∂n my√∂hemmin.",
            ephemeral=True
        )

class HelpDropdown(discord.ui.View):
    def __init__(self, channel):
        super().__init__(timeout=60)
        self.channel = channel

        self.options = [
            discord.SelectOption(label="‚öíÔ∏è Ongelma", value="ongelma", description="Tekninen ongelma tai bugi."),
            discord.SelectOption(label="‚ùì Report", value="report", description="Ilmoitus jostain asiattomasta."),
            discord.SelectOption(label="üì¢ Valitus", value="valitus", description="Virallinen valitus tai palaute."),
            discord.SelectOption(label="üíÅ Jokin muu", value="muu", description="Yleinen kysymys, idea tai ehdotus."),
            
        ]

        self.select = discord.ui.Select(placeholder="Valitse aihealue", options=self.options)
        self.select.callback = self.select_callback
        self.add_item(self.select)

    async def select_callback(self, interaction: discord.Interaction):
        valinta = next(opt for opt in self.options if opt.value == self.select.values[0])
        await interaction.response.send_modal(HelpModal(valinta=valinta, target_channel=self.channel))

class GiveawayView(discord.ui.View):
    def __init__(self, palkinto, rooli, kesto, alkuviesti, luoja, kieltorooli=None):
        super().__init__(timeout=None)
        self.palkinto = palkinto
        self.rooli = rooli
        self.kieltorooli = kieltorooli  
        self.kesto = kesto
        self.osallistujat = set()
        self.viesti = alkuviesti
        self.luoja = luoja
        self.loppunut = False
        self.voittaja = None

    @discord.ui.button(label="üéâ Osallistu", style=discord.ButtonStyle.green)
    async def osallistumisnappi(self, interaction: Interaction, button: discord.ui.Button):
        if self.loppunut:
            await interaction.response.send_message("Arvonta on jo p√§√§ttynyt.", ephemeral=True)
            return

        if self.kieltorooli and self.kieltorooli in interaction.user.roles:
            await interaction.response.send_message("Sinulla on rooli, joka est√§√§ osallistumisen t√§h√§n arvontaan.", ephemeral=True)
            return

        if self.rooli not in interaction.user.roles:
            await interaction.response.send_message("Sinulla ei ole oikeaa roolia osallistuaksesi.", ephemeral=True)
            return

        if interaction.user in self.osallistujat:
            await interaction.response.send_message("Olet jo osallistunut!", ephemeral=True)
            return

        self.osallistujat.add(interaction.user)
        await interaction.response.send_message("Olet mukana arvonnassa!", ephemeral=True)

        mod_log_channel_id = int(os.getenv("MOD_LOG_CHANNEL_ID", 0))
        mod_log_channel = interaction.client.get_channel(mod_log_channel_id)

        if mod_log_channel:
            logiviesti = (
                f"üì• **Arvontaan osallistuminen**\n"
                f"üë§ K√§ytt√§j√§: {interaction.user.mention} (`{interaction.user.id}`)\n"
                f"üéÅ Palkinto: {self.palkinto}\n"
                f"üéØ Rooli: {self.rooli.mention}\n"
                f"üëÆ Arvonnan luoja: {self.luoja.mention}"
            )
            await mod_log_channel.send(logiviesti)

    @discord.ui.button(label="‚õî Lopeta arvonta", style=discord.ButtonStyle.red)
    async def lopetusnappi(self, interaction: Interaction, button: discord.ui.Button):
        if interaction.user != self.luoja:
            await interaction.response.send_message("Vain arvonnan luoja voi lopettaa sen.", ephemeral=True)
            return
        await self.lopeta_arvonta(interaction.channel)

    async def lopeta_arvonta(self, kanava):
        if self.loppunut:
            return
        self.loppunut = True
        self.stop()

        mod_log_channel_id = int(os.getenv("MOD_LOG_CHANNEL_ID", 0))
        mod_log_channel = kanava.guild.get_channel(mod_log_channel_id)

        if self.osallistujat:
            self.voittaja = random.choice(list(self.osallistujat))
            await kanava.send(
                f"üéâ Onnea {self.voittaja.mention}, voitit **{self.palkinto}**!",
                view=RerollView(self)
            )

            if mod_log_channel:
                logiviesti = (
                    f"üèÜ **Arvonnan voittaja**\n"
                    f"üéÅ Palkinto: {self.palkinto}\n"
                    f"üë§ Voittaja: {self.voittaja.mention} (`{self.voittaja.id}`)\n"
                    f"üëÆ Arvonnan luoja: {self.luoja.mention}\n"
                    f"üìä Osallistujia yhteens√§: {len(self.osallistujat)}"
                )
                await mod_log_channel.send(logiviesti)

        else:
            await kanava.send(
                "‚õî Arvonta on p√§√§ttynyt, mutta kukaan ei osallistunut tai osallistujilla ei ollut oikeaa roolia."
            )

            if mod_log_channel:
                logiviesti = (
                    f"üö´ **Arvonta p√§√§ttyi ilman osallistujia**\n"
                    f"üéÅ Palkinto: {self.palkinto}\n"
                    f"üëÆ Arvonnan luoja: {self.luoja.mention}\n"
                    f"üìä Osallistujia: 0"
                )
                await mod_log_channel.send(logiviesti)

class RerollView(discord.ui.View):
    def __init__(self, giveaway_view: GiveawayView):
        super().__init__(timeout=None)
        self.giveaway_view = giveaway_view

    @discord.ui.button(label="üé≤ Arvo uusi voittaja", style=discord.ButtonStyle.blurple)
    async def reroll_button(self, interaction: Interaction, button: discord.ui.Button):
        if interaction.user != self.giveaway_view.luoja:
            await interaction.response.send_message("Vain arvonnan luoja voi arpoa uuden voittajan.", ephemeral=True)
            return
        osallistujat = list(self.giveaway_view.osallistujat - {self.giveaway_view.voittaja})
        if not osallistujat:
            await interaction.response.send_message("Ei ole muita osallistujia, joista arpoa uusi voittaja.", ephemeral=True)
            return
        uusi_voittaja = random.choice(osallistujat)
        self.giveaway_view.voittaja = uusi_voittaja
        await interaction.channel.send(f"üéâ Uusi voittaja on {uusi_voittaja.mention}! Onnea **{self.giveaway_view.palkinto}**:sta!")

KOMENTOJEN_ROOLIT = {
    "aika": "24G",
    "moikka": "24G",
    "esittely": "24G",
    "nofal": "24G",
    "kutsumalinkki": "24G",
    "ruokailuvuorot": "24G",
    "ruoka": "24G",
    "sano": "24G",
    "mielipide": ["VIP", "Mestari"],
    "laskin": "24G",
    "ajastin": ["VIP", "Mestari"],
    "kulppi": "24G",
    "seuraava_lomap√§iva": "24G",
    "meme": "24G",
    "help": "24G",
    "giveaway": "Mestari",
    "sammutus": "Mestari",
    "vaihda_tilaviesti": "Mestari",
    "vaihda_nimimerkki": "Mestari",
    "uudelleenkaynnistys": "Mestari",
    "ilmoitus": "Mestari",
    "clear": "Mestari",
    "lukitse": "Mestari",
    "ping": "24G",
    "tag": ["taso 15", "Taso 25", "Taso 50", "Mestari"],
    "vaihda_tag": ["taso 15", "Taso 25", "Taso 50", "Mestari"],
    "remove_tag": ["taso 15", "Taso 25", "Taso 50", "Mestari"],
    "stats": ["Taso 50", "Mestari"],
    "taso": "24G",
    "lis√§√§_xp": "Mestari",
    "v√§henn√§_xp": "Mestari",
    "mute": ["Moderaattori", "Mestari"],
    "unmute": ["Moderaattori", "Mestari"],
    "warn": ["Moderaattori", "Mestari"],
    "unwarn": ["Moderaattori", "Mestari"],
    "varoitukset": ["Moderaattori", "Mestari"],
    "kick": "Mestari",
    "ban": "Mestari",
    "unban": "Mestari",
    "huolto": "Mestari",
    "set_role": "Mestari",
    "remove_role": "Mestari",
    "vitsi": "24G",
    "reagoi": "Mestari",
    "teht√§v√§t": "24G",
    "kauppa": "24G",
    "l√§het√§dm": "Mestari",
    "tiedot": "24G",
    "komennot": "24G",
    "muistuta": ["VIP", "Mestari"],
    "holvi_tallenna": ["VIP", "Mestari"],
    "holvi_hae": ["VIP", "Mestari"],
    "ennustus": ["VIP", "Mestari"],
}

KOMENTOJEN_KUVAUKSET = {
    "aika": "N√§ytt√§√§ nykyisen ajan ja muiden alueiden kellonajat",
    "moikka": "Tervehtii k√§ytt√§j√§√§",
    "esittely": "N√§ytt√§√§ botin esittelyn",
    "nofal": "Nofal-komento",
    "kutsumalinkki": "Antaa kutsulinkin serverille ja tekee uusia kutsuja",
    "ruokailuvuorot": "N√§ytt√§√§ ruokailuvuorot",
    "ruoka": "Kertoo p√§iv√§n ruoan, 7 p√§iv√§n ruoan ja ensi viikon ruokalistan",
    "sano": "Botti sanoo jotain puolestasi",
    "mielipide": "Antaa satunnaisen mielipiteen sinun kysymyksest√§si",
    "laskin": "Laskee annetun laskutoimituksen ja n√§ytt√§√§ my√∂s v√§livaiheet",
    "ajastin": "K√§ynnist√§√§ haluamasi ajan ajastimen",
    "kulppi": "Kertoo Kulpin ajan annetusta ajasta",
    "seuraava_lomap√§iva": "N√§ytt√§√§ seuraavan lomap√§iv√§n",
    "meme": "L√§hett√§√§ satunnaisen meemin",
    "help": "Mahdollista ilmoittaa asiasta, kysy√§ apua tai antaa palautetta",
    "giveaway": "Luo tai hallinnoi arvontoja",
    "sammutus": "Sammuttaa botin",
    "vaihda_tilaviesti": "Vaihtaa botin tilaviestin",
    "vaihda_nimimerkki": "Vaihtaa k√§ytt√§j√§n nimimerkin",
    "uudelleenkaynnistys": "K√§ynnist√§√§ botin uudelleen",
    "ilmoitus": "L√§hett√§√§ ilmoituksen haluamalle kanavalle",
    "clear": "Poistaa viestej√§",
    "lukitse": "Lukitsee kanavan kaikilta k√§ytt√§jilt√§",
    "ping": "Testaa vasteajan",
    "tag": "Luo uuden tagin",
    "vaihda_tag": "Muokkaa olemassa olevaa tagia",
    "remove_tag": "Poistaa tagin",
    "stats": "N√§ytt√§√§ bottistatistiikkaa",
    "taso": "N√§ytt√§√§ k√§ytt√§j√§n tason ja XP:n",
    "lis√§√§_xp": "Lis√§√§ XP:t√§ k√§ytt√§j√§lle",
    "v√§henn√§_xp": "V√§hent√§√§ XP:t√§ k√§ytt√§j√§lt√§",
    "mute": "Mykist√§√§ k√§ytt√§j√§n",
    "unmute": "Poistaa mykistyksen",
    "warn": "Antaa varoituksen",
    "unwarn": "Poistaa varoituksen",
    "varoitukset": "N√§ytt√§√§ k√§ytt√§j√§n varoitukset",
    "kick": "Poistaa k√§ytt√§j√§n palvelimelta",
    "ban": "Bannaa k√§ytt√§j√§n",
    "unban": "Poistaa bannin k√§ytt√§j√§lt√§",
    "huolto": "Kytkee botin huoltotilan p√§√§lle",
    "set_role": "Antaa k√§ytt√§j√§lle roolin",
    "remove_role": "Poistaa k√§ytt√§j√§lt√§ roolin",
    "vitsi": "Kertoo satunnaisen vitsin",
    "l√§het√§dm": "L√§hett√§√§ viestin suoraan k√§ytt√§j√§lle (DM)",
    "tiedot": "N√§ytt√§√§ j√§senest√§ tallennetut botin tiedot",
    "reagoi": "Reagoi viestiin, joka sis√§lt√§√§ tietyn tekstin",
    "teht√§v√§t": "N√§yt√§ ja suorita p√§ivitt√§isi√§-, viikottaisia- tai kuukauttaisia teht√§vi√§",
    "komennot": "N√§ytt√§√§ kaikki k√§ytett√§viss√§ olevat komennot ja niiden selitykset",
    "kauppa": "N√§yt√§ kaupan tuotteet tai osta tuote",
    "muistuta": "Aseta muistutus itsellesi.",
    "holvi_hae": "Hae sis√§lt√∂ holvista salasanalla.",
    "holvi_tallenna": "Tallenna sis√§lt√∂ holviin salasanalla.",
    "ennustus": "Saat mystisen ennustuksen Sannamaijalta.",
}

def luo_embedit(user_roles):
    embedit = []
    nykyinen_embed = discord.Embed(title="K√§ytett√§viss√§ olevat komennot", color=discord.Color.blue())
    kentt√§_laskuri = 0

    for komento, roolivaatimus in KOMENTOJEN_ROOLIT.items():
        vaatimukset = roolivaatimus if isinstance(roolivaatimus, list) else [roolivaatimus]
        if roolivaatimus is None or any(rooli in user_roles for rooli in vaatimukset):
            kuvaus = KOMENTOJEN_KUVAUKSET.get(komento, "Ei kuvausta.")
            nykyinen_embed.add_field(name=f"/{komento}", value=kuvaus, inline=False)
            kentt√§_laskuri += 1

            if kentt√§_laskuri == 25:
                embedit.append(nykyinen_embed)
                nykyinen_embed = discord.Embed(title="K√§ytett√§viss√§ olevat komennot (jatkuu)", color=discord.Color.blue())
                kentt√§_laskuri = 0

    if kentt√§_laskuri > 0:
        embedit.append(nykyinen_embed)

    return embedit

class Utils(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    async def start_services(self):
        from utils.status_updater import update_status
        import asyncio
        asyncio.create_task(update_status())


    @app_commands.command(name="help", description="Kysy apua tai ilmoita asiasta.")
    @app_commands.checks.has_role("24G")
    async def help(self, interaction: discord.Interaction):
        await kirjaa_komento_lokiin(self.bot, interaction, "/help")
        await kirjaa_ga_event(self.bot, interaction.user.id, "help_komento")

        load_dotenv()
        HELP_CHANNEL_ID = int(os.getenv("HELP_CHANNEL_ID"))
        target_channel = interaction.guild.get_channel(HELP_CHANNEL_ID)
        if not target_channel:
            await interaction.response.send_message("Kanavaa 'modi-lokit' ei l√∂ytynyt.", ephemeral=True)
            return

        await interaction.response.send_message(
            "**Kuinka voisin olla t√§n√§√§n avuksi?**\nValitse alta aihe, niin voit kirjoittaa tarkemmin.",
            view=HelpDropdown(channel=target_channel),
            ephemeral=True
        )

    @app_commands.command(name="giveaway", description="Luo arvonta palkinnosta.")
    @app_commands.describe(
        palkinto="Mit√§ arvotaan?",
        kesto="Kesto minuutteina",
        rooli="Rooli jolla saa osallistua",
        kieltorooli="Rooli jolla ei saa osallistua"
    )
    @app_commands.checks.has_role("Mestari")
    async def giveaway(
        self,
        interaction: discord.Interaction,
        palkinto: str,
        kesto: int,
        rooli: discord.Role,
        kieltorooli: discord.Role
    ):
        await kirjaa_komento_lokiin(self.bot, interaction, "/giveaway")
        await kirjaa_ga_event(self.bot, interaction.user.id, "giveaway_komento")

        view = GiveawayView(palkinto, rooli, kesto, kieltorooli, interaction.user)
        await interaction.response.send_message(
            f"üéâ **Arvonta aloitettu!** üéâ\n"
            f"**Palkinto:** {palkinto}\n"
            f"**Osallistumisoikeus:** {rooli.mention}\n"
            f"**Ei voi osallistua jos kuuluu rooliin:** {kieltorooli.mention}\n"
            f"**Kesto:** {kesto} minuuttia\n\n"
            f"Paina **üéâ Osallistu** -painiketta osallistuaksesi!",
            view=view
        )

        view.viesti = await interaction.original_response()
        await asyncio.sleep(kesto * 60)
        await view.lopeta_arvonta(interaction.channel)

    @app_commands.command(name="heit√§", description="Heit√§ kolikkoa tai arvo numero.")
    @app_commands.describe(
        tyyppi="Valitse heiton tyyppi: numero, v√§li tai kolikko",
        min="Pienin arvo (k√§ytet√§√§n 'numero' ja 'v√§li' -tyypeiss√§)",
        max="Suurin arvo (k√§ytet√§√§n 'numero' ja 'v√§li' -tyypeiss√§)",
        vaihtoehto1="Ensimm√§inen vaihtoehto kolikon heittoon (esim. 'Kruunu')",
        vaihtoehto2="Toinen vaihtoehto kolikon heittoon (esim. 'Klaava')"
    )
    async def heit√§(
        self,
        interaction: discord.Interaction,
        tyyppi: Literal["numero", "v√§li", "kolikko"],
        min: Optional[int] = None,
        max: Optional[int] = None,
        vaihtoehto1: Optional[str] = None,
        vaihtoehto2: Optional[str] = None
    ):
        await kirjaa_ga_event(self.bot, interaction.user.id, "heit√§_komento")
        await kirjaa_komento_lokiin(self.bot, interaction, "/heit√§")

        if tyyppi in ["numero", "v√§li"]:
            if min is None or max is None:
                await interaction.response.send_message("Anna sek√§ minimi- ett√§ maksimiarvo.", ephemeral=True)
                return
            if min > max:
                await interaction.response.send_message("Minimi ei voi olla suurempi kuin maksimi.", ephemeral=True)
                return

            tulos = random.randint(min, max)
            await interaction.response.send_message(f"üé≤ Heitettiin numero: **{tulos}** (v√§lilt√§ {min}‚Äì{max})")

        elif tyyppi == "kolikko":
            valinnat = [vaihtoehto1 or "Kruunu", vaihtoehto2 or "Klaava"]
            tulos = random.choice(valinnat)
            await interaction.response.send_message(
                f"ü™ô Kolikko heitettiin: **{tulos}**\nVaihtoehdot olivat: `{valinnat[0]}` ja `{valinnat[1]}`"
            )

        else:
            await interaction.response.send_message("Tuntematon heittotyyppi.", ephemeral=True)

    @app_commands.command(name="tag", description="Lis√§√§ tagin k√§ytt√§j√§n serverinimen per√§√§n.")
    @app_commands.describe(tag="Haluttu tagi, 3-6 kirjainta pitk√§.")
    @app_commands.checks.has_role("24G")
    async def tag(self, interaction: discord.Interaction, tag: str):
        await kirjaa_komento_lokiin(self.bot, interaction, "/tag")
        await kirjaa_ga_event(self.bot, interaction.user.id, "tag_komento")
        tag = re.sub(r'[^a-zA-Z0-9]', '', tag.strip())
        kielletyt_sanat = ["niger", "nekru", "nigga", "nig", "homo", "gay", "homot", "pillu", "penis", "perse"]

        if len(tag) < 3 or len(tag) > 6:
            await interaction.response.send_message("Tagin t√§ytyy olla 3-6 kirjainta pitk√§.", ephemeral=True)
            return

        if tag.lower() in kielletyt_sanat:
            await interaction.response.send_message("Tagia ei voida k√§ytt√§√§, koska se sis√§lt√§√§ kielletyn sanan.", ephemeral=True)
            return

        current = interaction.user.nick or interaction.user.name
        uusi = f"{current} ({tag})"

        try:
            await interaction.user.edit(nick=uusi)
            await interaction.response.send_message(f"Tag **({tag})** lis√§ttiin onnistuneesti serverinimeesi!", ephemeral=True)
        except discord.Forbidden:
            await interaction.response.send_message("Ei oikeuksia muokata serverinime√§si.", ephemeral=True)
        except discord.HTTPException:
            await interaction.response.send_message("Virhe nimimerkki√§ muokatessa. Yrit√§ uudelleen.", ephemeral=True)

    @app_commands.command(name="vaihda_tag", description="Vaihda k√§ytt√§j√§n serverinimen tag uuteen.")
    @app_commands.describe(tag="Uusi tagi (3-6 kirjainta).")
    @app_commands.checks.has_role("24G")
    async def vaihda_tag(self, interaction: discord.Interaction, tag: str):
        await kirjaa_komento_lokiin(self.bot, interaction, "/vaihda_tag")
        await kirjaa_ga_event(self.bot, interaction.user.id, "vaihda_tag_komento")
        tag = tag.strip()
        kielletyt_sanat = ["niger", "nekru", "nigga", "nig"]

        if len(tag) < 3 or len(tag) > 6:
            await interaction.response.send_message("Tagin t√§ytyy olla 3-6 kirjainta pitk√§.", ephemeral=True)
            return

        if tag.lower() in kielletyt_sanat:
            await interaction.response.send_message("Tagia ei voida k√§ytt√§√§, koska se sis√§lt√§√§ kielletyn sanan.", ephemeral=True)
            return

        current = interaction.user.nick or interaction.user.name
        uusi_nimi = re.sub(r"\s*\(.*?\)", "", current).strip()
        uusi_nimi = f"{uusi_nimi} ({tag})"

        try:
            await interaction.user.edit(nick=uusi_nimi)
            await interaction.response.send_message(f"Tag on vaihdettu. Uusi serverinimesi: **{uusi_nimi}**", ephemeral=True)
        except discord.Forbidden:
            await interaction.response.send_message("Ei oikeuksia muokata serverinime√§si.", ephemeral=True)
        except discord.HTTPException:
            await interaction.response.send_message("Virhe nimimerkki√§ muokatessa. Yrit√§ uudelleen.", ephemeral=True)

    @app_commands.command(name="remove_tag", description="Poistaa tagin k√§ytt√§j√§n serverinimest√§.")
    @app_commands.checks.has_role("24G")
    async def remove_tag(self, interaction: discord.Interaction):
        await kirjaa_komento_lokiin(self.bot, interaction, "/remove_tag")
        await kirjaa_ga_event(self.bot, interaction.user.id, "remove_tag_komento")

        current = interaction.user.nick or interaction.user.name

        if "(" in current and ")" in current:
            uusi_nimi = re.sub(r"\s*\(.*?\)", "", current).strip()

            try:
                await interaction.user.edit(nick=uusi_nimi)
                await interaction.response.send_message(f"Tagi on poistettu. Uusi serverinimesi: **{uusi_nimi}**", ephemeral=True)
            except discord.Forbidden:
                await interaction.response.send_message("Ei oikeuksia muokata serverinime√§si.", ephemeral=True)
            except discord.HTTPException:
                await interaction.response.send_message("Virhe nimimerkki√§ muokatessa. Yrit√§ uudelleen.", ephemeral=True)
        else:
            await interaction.response.send_message("Serverinimesi ei sis√§ll√§ tagia, joten mit√§√§n ei tarvitse poistaa.", ephemeral=True)

    @app_commands.command(name="komennot", description="N√§ytt√§√§ kaikki k√§ytett√§viss√§ olevat komennot ja niiden selitykset.")
    @app_commands.checks.has_role("24G")
    async def komennot(self, interaction: discord.Interaction):
        await interaction.response.defer(ephemeral=True)

        try:
            if interaction.guild is None:
                await interaction.followup.send("T√§m√§ komento toimii vain palvelimella.", ephemeral=True)
                return

            await kirjaa_komento_lokiin(self.bot, interaction, "/komennot")
            await kirjaa_ga_event(self.bot, interaction.user.id, "komennot_komento")

            member = interaction.user if isinstance(interaction.user, discord.Member) else interaction.guild.get_member(interaction.user.id)
            if member is None:
                await interaction.followup.send("Virhe: K√§ytt√§j√§tietoja ei voitu hakea.", ephemeral=True)
                return

            user_roles = [role.name for role in member.roles]
            viesti = "**K√§ytett√§viss√§ olevat komennot:**\n"

            for komento, roolivaatimus in KOMENTOJEN_ROOLIT.items():
                vaatimukset = roolivaatimus if isinstance(roolivaatimus, list) else [roolivaatimus]
                if roolivaatimus is None or any(rooli in user_roles for rooli in vaatimukset):
                    kuvaus = KOMENTOJEN_KUVAUKSET.get(komento, "Ei kuvausta.")
                    viesti += f"**/{komento}** ‚Äì {kuvaus}\n"

            if viesti.strip() == "**K√§ytett√§viss√§ olevat komennot:**":
                viesti = "Sinulla ei ole oikeuksia yhteenk√§√§n komentoon."

            print(f"Viesti l√§hetet√§√§n: {viesti}")
            embedit = luo_embedit(user_roles)

            if not embedit:
                await interaction.followup.send("Sinulla ei ole oikeuksia yhteenk√§√§n komentoon.", ephemeral=True)
            else:
                for embed in embedit:
                    await interaction.followup.send(embed=embed, ephemeral=True)

        except Exception as e:
            print(f"Virhe komennon suorittamisessa: {e}")
            await interaction.followup.send(f"Virhe komennon suorittamisessa: {e}", ephemeral=True)

    @commands.Cog.listener()
    async def on_app_command_error(self, interaction, error):
        await CommandErrorHandler(self.bot, interaction, error)

async def setup(bot: commands.Bot):
    cog = Utils(bot)
    await bot.add_cog(cog)